{
  "hash": "3552657f34037a751c7745f3356431a3",
  "result": {
    "markdown": "---\ntitle: \"Urban Climate Patterns: Analysis of Urban Heat Islands\"\nsubtitle: \"INFO 523 - Fall 2023 - Project Final\"\nauthor: \n  - \"Ajinkya Deshmukh\"\n  - \"Dhanyapriya Somasundaram\"\n  - \"Kendall Beaver\"\n  - \"Riyanshi Bohra\"\n  - \"Udit Chaudhary\"\ntitle-slide-attributes:\n    data-background-image: images/dallas-united-states-travel-blog.jpg\n    data-background-size: stretch\n    data-background-opacity: \"0.35\"\n\nformat:\n  revealjs:\n    theme:  ['data/customtheming.scss']\n    transition: slide\n    background-transition: fade\n    scrollable: true    \neditor: visual\nexecute:\n  echo: false\n---\n\n\n\n\n\n\n# **What is an Urban Heat Island?** {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n## **UHI Definition** {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n-   A UHI (\"Urban Heat Island\") occurs when a city experiences much warmer temperatures than nearby rural areas.\n\n![](images/UHI_Title.png){fig-align=\"center\"}\n\n## **3 Cities for UHI Comparison** {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\nDallas vs. Arlington vs. Denton\n\n![](images/google_maps_dallas_metro.png){fig-align=\"center\"}\n\n# **Datasets** {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n## **Data Collection** {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n1.  Three datasets for the year 2022 were obtained from the [National Centers for Environmental Information](https://www.ncei.noaa.gov/access/search/data-search/local-climatological-data?pageNum=1&bbox=32.843,-97.215,32.629,-97.001), then combined into one major dataset.\n\n## Data Preprocessing and Cleaning {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n1.  Inspect the Data\n2.  Handle Missing Values\n3.  Ensure Temporal Integrity\n\n## Exploratory Data Analysis (EDA) {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n1.  Conduct EDA to identify patterns and relationships in the climatic data.\n\n2.  This can include visualizations like time series plots, histograms, and scatter plots to understand temperature trends, humidity levels, etc.\n\n## Exploratory Data Analysis (EDA) {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/day_vs_night_temps.png){fig-align=\"center\"}\n\n## Exploratory Data Analysis (EDA) {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/Region_Comaprison_by_months.png){fig-align=\"center\"}\n\n# Feature Engineering {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n## Create Seasonal Thresholds {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\nCreate and separate the data by \"Seasons\" and then create thresholds for each season based on the following weather conditions:\n\n1.  *Hourly Dry Bulb Temperature*\n\n2.  *Hourly Relative Humidity*\n\n3.  *Hourly Wind Speed*\n\n## Create Seasonal Thresholds {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/dallas_season_quartiles.png){fig-align=\"center\"}\n\n## Feature Engineering {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\nDesign a classification function to label UHI intensities for hourly weather data.\n\n``` python\ndef classify_uhi(row, temp_thresholds, humidity_thresholds, wind_speed_thresholds):\n    season = row['Season']\n    temp = row['HourlyDryBulbTemperature']\n    humidity = row['HourlyRelativeHumidity']\n    wind_speed = row['HourlyWindSpeed']\n\n    # Get the thresholds for the current season\n    temp_high = temp_thresholds.loc[season, 0.50]\n    temp_medium = temp_thresholds.loc[season, 0.25]\n    humidity_low = humidity_thresholds.loc[season, 0.25]\n    wind_speed_low = wind_speed_thresholds.loc[season, 0.25]\n\n    # Classify based on combined criteria\n    if temp > temp_high and humidity < humidity_low and wind_speed < wind_speed_low:\n        return 'High'\n    elif temp > temp_medium:\n        return 'Medium'\n    else:\n        return 'Low'\n```\n\n## Results of Classification Function {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/UHI_intensities.png){fig-align=\"center\"}\n\n# Classification Model Selection, Training, & Validation {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n## Model Selection (80% Train / 20% Test) {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\nDeveloped 5 classification models:\n\n1.  Decision Tree\n\n2.  Random Forest\n\n3.  XGBoost\n\n4.  Gradient Boost\n\n5.  SVM Classifier\n\n## Classification Model Results {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/classification_model_comparison.png){fig-align=\"center\"}\n\n## Random Forest {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n``` python\nrfc_model = RandomForestClassifier()\nrfc_model.fit(X_train, y_train)\n\ny_pred = rfc_model.predict(X_test)\nprint(classification_report(y_test, y_pred))\n```\n\n![](images/random_forest.png){fig-align=\"center\"}\n\n## Additional Evaluation of Random Forest {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/features_importance_RF.png){fig-align=\"center\"}\n\n# Time Series Analysis {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n## Time Series Analysis {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/time_series.png){fig-align=\"center\"}\n\n## Time Series Analysis {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/count of UHI Intensities.png){fig-align=\"center\"}\n\n## Time Series Analysis {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n![](images/third_time_series_analysis_plot.png){fig-align=\"center\"}\n\n# Conclusion {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n\n# Thank You! {background-image=\"images/dallas-united-states-travel-blog.jpg\" background-opacity=\"0.35\"}\n",
    "supporting": [
      "presentation_files\\figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}