[
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "",
    "text": "The primary objective of this project is to study and analyze climatological data for three cities inside and outside of the Dallas, TX region, and to classify these cities based on an “Urban Heat Island” (UHI) scale.\nIn climatology, UHI refers to cities that experience warmer temperatures than nearby rural areas, which occurs when land and natural vegetation are replaced by buildings, pavements, and surfaces that absorb and hold heat. This effect is also known as “micro climate” since a city’s infrastructure is creating its own local weather conditions.\nBy analyzing the micro climate data for Dallas, a major urban city in the country, and two suburban cities outside of Dallas—Denton and Arlington, we can create a classification system for different levels of intensities for UHIs and label these cities accordingly. Additionally, we will perform temporal analysis by comparing and contrasting various weather patterns for different heat intensities of UHIs.\n\n\nThis project will focus on assessing UHIs in various urban environments, particularly comparing the UHI intensity in the following settings:\n\nDallas (Significant City)\nAnalyzing the UHI in a major metropolitan area with high population density and urbanization. Factors such as pollution, land use, and climate will be considered to determine the UHIs’ intensity.\nArlington (Suburban Town)\nEvaluating the UHI in a suburban setting, with a moderate population density and less urban development than a significant city. This comparison will help us understand how UHIs vary in less densely populated areas.\nDenton (Rural City)\nExamining the UHI in a rural city, where factors like lower population density, less pollution, and different land use patterns play a role in UHI intensity."
  },
  {
    "objectID": "proposal.html#project-objective",
    "href": "proposal.html#project-objective",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "",
    "text": "The primary objective of this project is to study and analyze climatological data for three cities inside and outside of the Dallas, TX region, and to classify these cities based on an “Urban Heat Island” (UHI) scale.\nIn climatology, UHI refers to cities that experience warmer temperatures than nearby rural areas, which occurs when land and natural vegetation are replaced by buildings, pavements, and surfaces that absorb and hold heat. This effect is also known as “micro climate” since a city’s infrastructure is creating its own local weather conditions.\nBy analyzing the micro climate data for Dallas, a major urban city in the country, and two suburban cities outside of Dallas—Denton and Arlington, we can create a classification system for different levels of intensities for UHIs and label these cities accordingly. Additionally, we will perform temporal analysis by comparing and contrasting various weather patterns for different heat intensities of UHIs.\n\n\nThis project will focus on assessing UHIs in various urban environments, particularly comparing the UHI intensity in the following settings:\n\nDallas (Significant City)\nAnalyzing the UHI in a major metropolitan area with high population density and urbanization. Factors such as pollution, land use, and climate will be considered to determine the UHIs’ intensity.\nArlington (Suburban Town)\nEvaluating the UHI in a suburban setting, with a moderate population density and less urban development than a significant city. This comparison will help us understand how UHIs vary in less densely populated areas.\nDenton (Rural City)\nExamining the UHI in a rural city, where factors like lower population density, less pollution, and different land use patterns play a role in UHI intensity."
  },
  {
    "objectID": "proposal.html#dataset-description",
    "href": "proposal.html#dataset-description",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "Dataset Description",
    "text": "Dataset Description\nThe high-level goal of this project is to detect, analyze, and understand UHIs by leveraging data mining and machine learning to understand the microclimatic effects of urbanization in various metropolitan landscapes.\nClimatological and hourly time-series data has been collected from several weather stations run by the National Weather Service (NWS), Federal Aviation Administration (FAA), and Department of Defense (DOD), which encompass data collected from airports and other significant areas. This data has been divided into three Local Climatological Datasets (LCD) for Arlington, Dallas, and Denton for the year 2022.\nThe dataset that we’ve gathered from National Center for Environmental Information (NCEI) (https://www.ncei.noaa.gov/) offers these key daily summaries that we will be analyzing:\n\n\n\n\n\n\n\n\nColumn Names\nDescription\nData Type\n\n\n\n\nDATE\nDate of the observation (year, month and day) along with time of observation given as a 4-digit number using a 24-hour clock in local standard time\nString\n\n\nHourlyAverageDryBulbTemperature\nThis is the dry-bulb temperature and is commonly used as the standard air temperature reported. It is given here in whole degrees Fahrenheit.\nFloat\n\n\nHourlyAverageWetBulbTemperature\nThis is the wet-bulb temperature. It is given here in whole degrees Fahrenheit.\nFloat\n\n\nHourlyAverageDewPointTemperature\nThis is the dew point temperature. It is given here in whole degrees Fahrenheit.\nFloat\n\n\nHourlyPrecipitation\nTotal Liquid Content (TLC) water equivalent amount of precipitation for the day.\nFloat\n\n\nHourlyAverageSeaLevelPressure\nSea level pressure given in inches of Mercury (in Hg).\nFloat\n\n\nHourlyAverageStationPressure\nAtmospheric pressure observed at the station during the time of observation. Given in inches of Mercury (in Hg).\nFloat\n\n\nHourlyAverageRelativeHumidity\nThis is the relative humidity given to the nearest whole percentage.\nFloat\n\n\nHourlyAverageWindSpeed\nSpeed of the wind at the time of observation given in miles per hour (mph).\nFloat\n\n\nHourlySustainedWindDirection\nWind direction from true north using compass directions (e.g. 360 = true north, 180 = south, 270 = west, etc.).\nFloat\n\n\n\nAdditional data is included in the tabulated monthly summaries: maximum, minimum, and average temperatures; deviations from normal; ceiling height; visibility; weather patterns; heating and cooling degree days; fastest wind speeds and their directions; sky cover; and instances of sunshine, snowfall, and snow depth."
  },
  {
    "objectID": "proposal.html#three-datasets",
    "href": "proposal.html#three-datasets",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "Three Datasets",
    "text": "Three Datasets\n\n1.) Arlington Dataset\n\n\n(10938 rows x 124 columns)\n\n\n\n\n\n\n\nSTATION\n\n\nDATE\n\n\nLATITUDE\n\n\nLONGITUDE\n\n\nELEVATION\n\n\nNAME\n\n\nREPORT_TYPE\n\n\nSOURCE\n\n\nHourlyAltimeterSetting\n\n\nHourlyDewPointTemperature\n\n\nHourlyDryBulbTemperature\n\n\nHourlyPrecipitation\n\n\nHourlyPresentWeatherType\n\n\nHourlyPressureChange\n\n\nHourlyPressureTendency\n\n\nHourlyRelativeHumidity\n\n\nHourlySkyConditions\n\n\nHourlySeaLevelPressure\n\n\nHourlyStationPressure\n\n\nHourlyVisibility\n\n\nHourlyWetBulbTemperature\n\n\nHourlyWindDirection\n\n\nHourlyWindGustSpeed\n\n\nHourlyWindSpeed\n\n\nSunrise\n\n\nSunset\n\n\nDailyAverageDewPointTemperature\n\n\nDailyAverageDryBulbTemperature\n\n\nDailyAverageRelativeHumidity\n\n\nDailyAverageSeaLevelPressure\n\n\nDailyAverageStationPressure\n\n\nDailyAverageWetBulbTemperature\n\n\nDailyAverageWindSpeed\n\n\nDailyCoolingDegreeDays\n\n\nDailyDepartureFromNormalAverageTemperature\n\n\nDailyHeatingDegreeDays\n\n\nDailyMaximumDryBulbTemperature\n\n\nDailyMinimumDryBulbTemperature\n\n\nDailyPeakWindDirection\n\n\nDailyPeakWindSpeed\n\n\nDailyPrecipitation\n\n\nDailySnowDepth\n\n\nDailySnowfall\n\n\nDailySustainedWindDirection\n\n\nDailySustainedWindSpeed\n\n\nDailyWeather\n\n\nMonthlyAverageRH\n\n\nMonthlyDaysWithGT001Precip\n\n\nMonthlyDaysWithGT010Precip\n\n\nMonthlyDaysWithGT32Temp\n\n\nMonthlyDaysWithGT90Temp\n\n\nMonthlyDaysWithLT0Temp\n\n\nMonthlyDaysWithLT32Temp\n\n\nMonthlyDepartureFromNormalAverageTemperature\n\n\nMonthlyDepartureFromNormalCoolingDegreeDays\n\n\nMonthlyDepartureFromNormalHeatingDegreeDays\n\n\nMonthlyDepartureFromNormalMaximumTemperature\n\n\nMonthlyDepartureFromNormalMinimumTemperature\n\n\nMonthlyDepartureFromNormalPrecipitation\n\n\nMonthlyDewpointTemperature\n\n\nMonthlyGreatestPrecip\n\n\nMonthlyGreatestPrecipDate\n\n\nMonthlyGreatestSnowDepth\n\n\nMonthlyGreatestSnowDepthDate\n\n\nMonthlyGreatestSnowfall\n\n\nMonthlyGreatestSnowfallDate\n\n\nMonthlyMaxSeaLevelPressureValue\n\n\nMonthlyMaxSeaLevelPressureValueDate\n\n\nMonthlyMaxSeaLevelPressureValueTime\n\n\nMonthlyMaximumTemperature\n\n\nMonthlyMeanTemperature\n\n\nMonthlyMinSeaLevelPressureValue\n\n\nMonthlyMinSeaLevelPressureValueDate\n\n\nMonthlyMinSeaLevelPressureValueTime\n\n\nMonthlyMinimumTemperature\n\n\nMonthlySeaLevelPressure\n\n\nMonthlyStationPressure\n\n\nMonthlyTotalLiquidPrecipitation\n\n\nMonthlyTotalSnowfall\n\n\nMonthlyWetBulb\n\n\nAWND\n\n\nCDSD\n\n\nCLDD\n\n\nDSNW\n\n\nHDSD\n\n\nHTDD\n\n\nDYTS\n\n\nDYHF\n\n\nNormalsCoolingDegreeDay\n\n\nNormalsHeatingDegreeDay\n\n\nShortDurationEndDate005\n\n\nShortDurationEndDate010\n\n\nShortDurationEndDate015\n\n\nShortDurationEndDate020\n\n\nShortDurationEndDate030\n\n\nShortDurationEndDate045\n\n\nShortDurationEndDate060\n\n\nShortDurationEndDate080\n\n\nShortDurationEndDate100\n\n\nShortDurationEndDate120\n\n\nShortDurationEndDate150\n\n\nShortDurationEndDate180\n\n\nShortDurationPrecipitationValue005\n\n\nShortDurationPrecipitationValue010\n\n\nShortDurationPrecipitationValue015\n\n\nShortDurationPrecipitationValue020\n\n\nShortDurationPrecipitationValue030\n\n\nShortDurationPrecipitationValue045\n\n\nShortDurationPrecipitationValue060\n\n\nShortDurationPrecipitationValue080\n\n\nShortDurationPrecipitationValue100\n\n\nShortDurationPrecipitationValue120\n\n\nShortDurationPrecipitationValue150\n\n\nShortDurationPrecipitationValue180\n\n\nBackupDirection\n\n\nBackupDistance\n\n\nBackupDistanceUnit\n\n\nBackupElements\n\n\nBackupElevation\n\n\nBackupEquipment\n\n\nBackupLatitude\n\n\nBackupLongitude\n\n\nBackupName\n\n\nWindEquipmentChangeDate\n\n\n\n\n\n\n72247953907\n\n\n2022-01-01 00:18:00\n\n\n32.65832\n\n\n-97.09509\n\n\n179.7\n\n\nARLINGTON MUNICIPAL AIRPORT, TX US\n\n\nFM-16\n\n\n7\n\n\n29.66\n\n\n65\n\n\n67\n\n\n0.03\n\n\n-RA:02 BR:1 |RA |RA\n\n\nNA\n\n\nNA\n\n\n93\n\n\nOVC:08 15\n\n\nNA\n\n\n28.99\n\n\n2.50\n\n\n66\n\n\n290\n\n\nNA\n\n\n8\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-26\n\n\n\n\n72247953907\n\n\n2022-01-01 00:27:00\n\n\n32.65832\n\n\n-97.09509\n\n\n179.7\n\n\nARLINGTON MUNICIPAL AIRPORT, TX US\n\n\nFM-16\n\n\n7\n\n\n29.66\n\n\n65\n\n\n67\n\n\n0.04\n\n\n-RA:02 BR:1 |RA |RA\n\n\nNA\n\n\nNA\n\n\n93\n\n\nOVC:08 15\n\n\nNA\n\n\n28.99\n\n\n3.00\n\n\n66\n\n\n270\n\n\nNA\n\n\n8\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-26\n\n\n\n\n72247953907\n\n\n2022-01-01 00:53:00\n\n\n32.65832\n\n\n-97.09509\n\n\n179.7\n\n\nARLINGTON MUNICIPAL AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.65\n\n\n63\n\n\n66\n\n\n0.04\n\n\nBR:1 ||\n\n\nNA\n\n\nNA\n\n\n90\n\n\nFEW:02 13 BKN:07 25 OVC:08 32\n\n\n29.62\n\n\n28.98\n\n\n5.00\n\n\n64\n\n\n310\n\n\nNA\n\n\n6\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-26\n\n\n\n\n72247953907\n\n\n2022-01-01 01:53:00\n\n\n32.65832\n\n\n-97.09509\n\n\n179.7\n\n\nARLINGTON MUNICIPAL AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.65\n\n\n63\n\n\n65\n\n\nT\n\n\nBR:1 ||\n\n\nNA\n\n\nNA\n\n\n93\n\n\nOVC:08 26\n\n\n29.62\n\n\n28.98\n\n\n5.00\n\n\n64\n\n\n330\n\n\nNA\n\n\n3\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-26\n\n\n\n\n72247953907\n\n\n2022-01-01 02:53:00\n\n\n32.65832\n\n\n-97.09509\n\n\n179.7\n\n\nARLINGTON MUNICIPAL AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.63\n\n\n63\n\n\n65\n\n\nT\n\n\nBR:1 ||\n\n\n0.02\n\n\n8\n\n\n93\n\n\nOVC:08 26\n\n\n29.61\n\n\n28.96\n\n\n4.00\n\n\n64\n\n\n310\n\n\nNA\n\n\n3\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-26\n\n\n\n\n\n\n\n\n\n2.) Dallas Dataset\n\n\n(10536 rows x 124 columns)\n\n\n\n\n\n\n\nSTATION\n\n\nDATE\n\n\nLATITUDE\n\n\nLONGITUDE\n\n\nELEVATION\n\n\nNAME\n\n\nREPORT_TYPE\n\n\nSOURCE\n\n\nHourlyAltimeterSetting\n\n\nHourlyDewPointTemperature\n\n\nHourlyDryBulbTemperature\n\n\nHourlyPrecipitation\n\n\nHourlyPresentWeatherType\n\n\nHourlyPressureChange\n\n\nHourlyPressureTendency\n\n\nHourlyRelativeHumidity\n\n\nHourlySkyConditions\n\n\nHourlySeaLevelPressure\n\n\nHourlyStationPressure\n\n\nHourlyVisibility\n\n\nHourlyWetBulbTemperature\n\n\nHourlyWindDirection\n\n\nHourlyWindGustSpeed\n\n\nHourlyWindSpeed\n\n\nSunrise\n\n\nSunset\n\n\nDailyAverageDewPointTemperature\n\n\nDailyAverageDryBulbTemperature\n\n\nDailyAverageRelativeHumidity\n\n\nDailyAverageSeaLevelPressure\n\n\nDailyAverageStationPressure\n\n\nDailyAverageWetBulbTemperature\n\n\nDailyAverageWindSpeed\n\n\nDailyCoolingDegreeDays\n\n\nDailyDepartureFromNormalAverageTemperature\n\n\nDailyHeatingDegreeDays\n\n\nDailyMaximumDryBulbTemperature\n\n\nDailyMinimumDryBulbTemperature\n\n\nDailyPeakWindDirection\n\n\nDailyPeakWindSpeed\n\n\nDailyPrecipitation\n\n\nDailySnowDepth\n\n\nDailySnowfall\n\n\nDailySustainedWindDirection\n\n\nDailySustainedWindSpeed\n\n\nDailyWeather\n\n\nMonthlyAverageRH\n\n\nMonthlyDaysWithGT001Precip\n\n\nMonthlyDaysWithGT010Precip\n\n\nMonthlyDaysWithGT32Temp\n\n\nMonthlyDaysWithGT90Temp\n\n\nMonthlyDaysWithLT0Temp\n\n\nMonthlyDaysWithLT32Temp\n\n\nMonthlyDepartureFromNormalAverageTemperature\n\n\nMonthlyDepartureFromNormalCoolingDegreeDays\n\n\nMonthlyDepartureFromNormalHeatingDegreeDays\n\n\nMonthlyDepartureFromNormalMaximumTemperature\n\n\nMonthlyDepartureFromNormalMinimumTemperature\n\n\nMonthlyDepartureFromNormalPrecipitation\n\n\nMonthlyDewpointTemperature\n\n\nMonthlyGreatestPrecip\n\n\nMonthlyGreatestPrecipDate\n\n\nMonthlyGreatestSnowDepth\n\n\nMonthlyGreatestSnowDepthDate\n\n\nMonthlyGreatestSnowfall\n\n\nMonthlyGreatestSnowfallDate\n\n\nMonthlyMaxSeaLevelPressureValue\n\n\nMonthlyMaxSeaLevelPressureValueDate\n\n\nMonthlyMaxSeaLevelPressureValueTime\n\n\nMonthlyMaximumTemperature\n\n\nMonthlyMeanTemperature\n\n\nMonthlyMinSeaLevelPressureValue\n\n\nMonthlyMinSeaLevelPressureValueDate\n\n\nMonthlyMinSeaLevelPressureValueTime\n\n\nMonthlyMinimumTemperature\n\n\nMonthlySeaLevelPressure\n\n\nMonthlyStationPressure\n\n\nMonthlyTotalLiquidPrecipitation\n\n\nMonthlyTotalSnowfall\n\n\nMonthlyWetBulb\n\n\nAWND\n\n\nCDSD\n\n\nCLDD\n\n\nDSNW\n\n\nHDSD\n\n\nHTDD\n\n\nDYTS\n\n\nDYHF\n\n\nNormalsCoolingDegreeDay\n\n\nNormalsHeatingDegreeDay\n\n\nShortDurationEndDate005\n\n\nShortDurationEndDate010\n\n\nShortDurationEndDate015\n\n\nShortDurationEndDate020\n\n\nShortDurationEndDate030\n\n\nShortDurationEndDate045\n\n\nShortDurationEndDate060\n\n\nShortDurationEndDate080\n\n\nShortDurationEndDate100\n\n\nShortDurationEndDate120\n\n\nShortDurationEndDate150\n\n\nShortDurationEndDate180\n\n\nShortDurationPrecipitationValue005\n\n\nShortDurationPrecipitationValue010\n\n\nShortDurationPrecipitationValue015\n\n\nShortDurationPrecipitationValue020\n\n\nShortDurationPrecipitationValue030\n\n\nShortDurationPrecipitationValue045\n\n\nShortDurationPrecipitationValue060\n\n\nShortDurationPrecipitationValue080\n\n\nShortDurationPrecipitationValue100\n\n\nShortDurationPrecipitationValue120\n\n\nShortDurationPrecipitationValue150\n\n\nShortDurationPrecipitationValue180\n\n\nBackupDirection\n\n\nBackupDistance\n\n\nBackupDistanceUnit\n\n\nBackupElements\n\n\nBackupElevation\n\n\nBackupEquipment\n\n\nBackupLatitude\n\n\nBackupLongitude\n\n\nBackupName\n\n\nWindEquipmentChangeDate\n\n\n\n\n\n\n72258013960\n\n\n2022-01-01 00:53:00\n\n\n32.83839\n\n\n-96.83583\n\n\n147.6\n\n\nDALLAS FAA AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.65\n\n\n63\n\n\n65\n\n\n0.01\n\n\nBR:1 ||\n\n\nNA\n\n\nNA\n\n\n93\n\n\nOVC:08 15\n\n\n29.63\n\n\n29.13\n\n\n5\n\n\n64\n\n\n320\n\n\nNA\n\n\n9\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2009-05-28\n\n\n\n\n72258013960\n\n\n2022-01-01 01:53:00\n\n\n32.83839\n\n\n-96.83583\n\n\n147.6\n\n\nDALLAS FAA AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.64\n\n\n63\n\n\n65\n\n\n0.01\n\n\n-RA:02 BR:1 |RA |RA\n\n\nNA\n\n\nNA\n\n\n93\n\n\nOVC:08 22\n\n\n29.62\n\n\n29.12\n\n\n6\n\n\n64\n\n\n360\n\n\nNA\n\n\n6\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2009-05-28\n\n\n\n\n72258013960\n\n\n2022-01-01 02:53:00\n\n\n32.83839\n\n\n-96.83583\n\n\n147.6\n\n\nDALLAS FAA AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.63\n\n\n63\n\n\n64\n\n\nT\n\n\nNA\n\n\n0.01\n\n\n8\n\n\n96\n\n\nOVC:08 25\n\n\n29.61\n\n\n29.11\n\n\n7\n\n\n63\n\n\n000\n\n\nNA\n\n\n0\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2009-05-28\n\n\n\n\n72258013960\n\n\n2022-01-01 03:53:00\n\n\n32.83839\n\n\n-96.83583\n\n\n147.6\n\n\nDALLAS FAA AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.63\n\n\n61\n\n\n64\n\n\nT\n\n\n-RA:02 |RA |RA\n\n\nNA\n\n\nNA\n\n\n90\n\n\nOVC:08 26\n\n\n29.61\n\n\n29.11\n\n\n9\n\n\n62\n\n\n080\n\n\nNA\n\n\n3\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2009-05-28\n\n\n\n\n72258013960\n\n\n2022-01-01 04:53:00\n\n\n32.83839\n\n\n-96.83583\n\n\n147.6\n\n\nDALLAS FAA AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.62\n\n\n59\n\n\n63\n\n\nT\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n87\n\n\nOVC:08 28\n\n\n29.60\n\n\n29.10\n\n\n10\n\n\n61\n\n\n110\n\n\nNA\n\n\n5\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2009-05-28\n\n\n\n\n\n\n\n\n\n3.) Denton Dataset\n\n\n(10808 rows x 124 columns)\n\n\n\n\n\n\n\nSTATION\n\n\nDATE\n\n\nLATITUDE\n\n\nLONGITUDE\n\n\nELEVATION\n\n\nNAME\n\n\nREPORT_TYPE\n\n\nSOURCE\n\n\nHourlyAltimeterSetting\n\n\nHourlyDewPointTemperature\n\n\nHourlyDryBulbTemperature\n\n\nHourlyPrecipitation\n\n\nHourlyPresentWeatherType\n\n\nHourlyPressureChange\n\n\nHourlyPressureTendency\n\n\nHourlyRelativeHumidity\n\n\nHourlySkyConditions\n\n\nHourlySeaLevelPressure\n\n\nHourlyStationPressure\n\n\nHourlyVisibility\n\n\nHourlyWetBulbTemperature\n\n\nHourlyWindDirection\n\n\nHourlyWindGustSpeed\n\n\nHourlyWindSpeed\n\n\nSunrise\n\n\nSunset\n\n\nDailyAverageDewPointTemperature\n\n\nDailyAverageDryBulbTemperature\n\n\nDailyAverageRelativeHumidity\n\n\nDailyAverageSeaLevelPressure\n\n\nDailyAverageStationPressure\n\n\nDailyAverageWetBulbTemperature\n\n\nDailyAverageWindSpeed\n\n\nDailyCoolingDegreeDays\n\n\nDailyDepartureFromNormalAverageTemperature\n\n\nDailyHeatingDegreeDays\n\n\nDailyMaximumDryBulbTemperature\n\n\nDailyMinimumDryBulbTemperature\n\n\nDailyPeakWindDirection\n\n\nDailyPeakWindSpeed\n\n\nDailyPrecipitation\n\n\nDailySnowDepth\n\n\nDailySnowfall\n\n\nDailySustainedWindDirection\n\n\nDailySustainedWindSpeed\n\n\nDailyWeather\n\n\nMonthlyAverageRH\n\n\nMonthlyDaysWithGT001Precip\n\n\nMonthlyDaysWithGT010Precip\n\n\nMonthlyDaysWithGT32Temp\n\n\nMonthlyDaysWithGT90Temp\n\n\nMonthlyDaysWithLT0Temp\n\n\nMonthlyDaysWithLT32Temp\n\n\nMonthlyDepartureFromNormalAverageTemperature\n\n\nMonthlyDepartureFromNormalCoolingDegreeDays\n\n\nMonthlyDepartureFromNormalHeatingDegreeDays\n\n\nMonthlyDepartureFromNormalMaximumTemperature\n\n\nMonthlyDepartureFromNormalMinimumTemperature\n\n\nMonthlyDepartureFromNormalPrecipitation\n\n\nMonthlyDewpointTemperature\n\n\nMonthlyGreatestPrecip\n\n\nMonthlyGreatestPrecipDate\n\n\nMonthlyGreatestSnowDepth\n\n\nMonthlyGreatestSnowDepthDate\n\n\nMonthlyGreatestSnowfall\n\n\nMonthlyGreatestSnowfallDate\n\n\nMonthlyMaxSeaLevelPressureValue\n\n\nMonthlyMaxSeaLevelPressureValueDate\n\n\nMonthlyMaxSeaLevelPressureValueTime\n\n\nMonthlyMaximumTemperature\n\n\nMonthlyMeanTemperature\n\n\nMonthlyMinSeaLevelPressureValue\n\n\nMonthlyMinSeaLevelPressureValueDate\n\n\nMonthlyMinSeaLevelPressureValueTime\n\n\nMonthlyMinimumTemperature\n\n\nMonthlySeaLevelPressure\n\n\nMonthlyStationPressure\n\n\nMonthlyTotalLiquidPrecipitation\n\n\nMonthlyTotalSnowfall\n\n\nMonthlyWetBulb\n\n\nAWND\n\n\nCDSD\n\n\nCLDD\n\n\nDSNW\n\n\nHDSD\n\n\nHTDD\n\n\nDYTS\n\n\nDYHF\n\n\nNormalsCoolingDegreeDay\n\n\nNormalsHeatingDegreeDay\n\n\nShortDurationEndDate005\n\n\nShortDurationEndDate010\n\n\nShortDurationEndDate015\n\n\nShortDurationEndDate020\n\n\nShortDurationEndDate030\n\n\nShortDurationEndDate045\n\n\nShortDurationEndDate060\n\n\nShortDurationEndDate080\n\n\nShortDurationEndDate100\n\n\nShortDurationEndDate120\n\n\nShortDurationEndDate150\n\n\nShortDurationEndDate180\n\n\nShortDurationPrecipitationValue005\n\n\nShortDurationPrecipitationValue010\n\n\nShortDurationPrecipitationValue015\n\n\nShortDurationPrecipitationValue020\n\n\nShortDurationPrecipitationValue030\n\n\nShortDurationPrecipitationValue045\n\n\nShortDurationPrecipitationValue060\n\n\nShortDurationPrecipitationValue080\n\n\nShortDurationPrecipitationValue100\n\n\nShortDurationPrecipitationValue120\n\n\nShortDurationPrecipitationValue150\n\n\nShortDurationPrecipitationValue180\n\n\nBackupDirection\n\n\nBackupDistance\n\n\nBackupDistanceUnit\n\n\nBackupElements\n\n\nBackupElevation\n\n\nBackupEquipment\n\n\nBackupLatitude\n\n\nBackupLongitude\n\n\nBackupName\n\n\nWindEquipmentChangeDate\n\n\n\n\n\n\n72258903991\n\n\n2022-01-01 00:18:00\n\n\n33.20883\n\n\n-97.19922\n\n\n194.6\n\n\nDENTON MUNICPAL AIRPORT, TX US\n\n\nFM-16\n\n\n7\n\n\n29.66\n\n\n60\n\n\n63\n\n\nT\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n90\n\n\nBKN:07 30 OVC:08 36\n\n\nNA\n\n\n28.97\n\n\n9.00\n\n\n61\n\n\n350\n\n\nNA\n\n\n5\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-27\n\n\n\n\n72258903991\n\n\n2022-01-01 00:53:00\n\n\n33.20883\n\n\n-97.19922\n\n\n194.6\n\n\nDENTON MUNICPAL AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.66\n\n\n59\n\n\n62\n\n\nT\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n90\n\n\nOVC:08 37\n\n\n29.64\n\n\n28.97\n\n\n9.00\n\n\n60\n\n\n000\n\n\nNA\n\n\n0\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-27\n\n\n\n\n72258903991\n\n\n2022-01-01 01:53:00\n\n\n33.20883\n\n\n-97.19922\n\n\n194.6\n\n\nDENTON MUNICPAL AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.63\n\n\n60\n\n\n62\n\n\nT\n\n\n-RA:02 |RA |RA\n\n\nNA\n\n\nNA\n\n\n93\n\n\nOVC:08 35\n\n\n29.61\n\n\n28.95\n\n\n9.00\n\n\n61\n\n\n000\n\n\nNA\n\n\n0\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-27\n\n\n\n\n72258903991\n\n\n2022-01-01 02:53:00\n\n\n33.20883\n\n\n-97.19922\n\n\n194.6\n\n\nDENTON MUNICPAL AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.63\n\n\n60\n\n\n61\n\n\nT\n\n\nNA\n\n\n0.03\n\n\n8\n\n\n97\n\n\nOVC:08 42\n\n\n29.61\n\n\n28.95\n\n\n7.00\n\n\n60\n\n\n000\n\n\nNA\n\n\n0\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-27\n\n\n\n\n72258903991\n\n\n2022-01-01 03:53:00\n\n\n33.20883\n\n\n-97.19922\n\n\n194.6\n\n\nDENTON MUNICPAL AIRPORT, TX US\n\n\nFM-15\n\n\n7\n\n\n29.63\n\n\n60\n\n\n61\n\n\n0.00\n\n\nBR:1 ||\n\n\nNA\n\n\nNA\n\n\n97\n\n\nOVC:08 45\n\n\n29.61\n\n\n28.95\n\n\n6.00\n\n\n60\n\n\n000\n\n\nNA\n\n\n0\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\nNA\n\n\n2007-02-27"
  },
  {
    "objectID": "proposal.html#questions",
    "href": "proposal.html#questions",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "Questions",
    "text": "Questions\n\nHow does Urban Heat Island (UHI) intensity vary between urban and rural settings, such as Dallas, Arlington, and Denton, throughout a given year, and what methods can be employed to classify and interpret these varying intensity levels?\nExplanation: This question highlights the investigation of variations in UHI intensity between metropolitan cities and rural areas such as Arlington, Dallas, and Denton. By classifying UHI intensity in terms of multi-class classification into levels, the aim is to develop an approach that provides a comprehensive understanding of how urban and rural environments influence these observed differences in a given year.\nHow can time series data visualizations effectively illustrate the variations in Urban Heat Island (UHI) intensity across metropolitan and rural areas like Arlington, Dallas, and Denton over a given year, highlighting the distinct temporal patterns of UHI levels?\nExplanation: This question dives into the exploration of variations in the UHI intensity in metropolitan cities and rural areas like Arlington, Dallas and Denton throughout a specific year. Time series analysis will be used to uncover changes over seasons and highlight the levels of UHI. By employing techniques this investigation aims to provide an easy understanding of how UHI intensity changes over seasons identifying patterns that differentiate between urban heat impacts, in metropolitan and rural environments across the specified region."
  },
  {
    "objectID": "proposal.html#analysis-plan",
    "href": "proposal.html#analysis-plan",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "Analysis Plan",
    "text": "Analysis Plan\n\nData Pre-Processing\nObjective: Prepare the dataset for analysis by cleaning and structuring the data.\n\nMerge datasets from different locations (Dallas, Arlington, Denton) into a unified format.\nIdentify and handle missing values through imputation.\nConvert data types as necessary for consistency.\nNormalize and standardize data to ensure comparability.\n\n\n\nEDA (Exploratory Data Analysis)\nObjective: Gain initial insights into the dataset and identify patterns.\n\nVisualize key metrics such as temperature, humidity, and wind patterns.\nIdentify initial trends and seasonal variations.\nPerform basic statistical analyses to understand data distributions.\n\n\n\nFeature Engineering\nObjective: Enhance the dataset with additional relevant features for analysis.\n\nPerforming feature selection by selecting relevant features for the modeling phase.\nDevelop a new feature for the classification task that defines the level of UHI intensity (High, Medium, Low). This feature will be derived based on specific conditions and thresholds of key parameters like temperature, humidity, wind speed, etc.\nCreate new features that could influence UHI intensity, such as time of day, day of the week, and season.\n\n\n\nTemporal Analysis\nObjective: Analyze UHI intensity over time to identify trends and anomalies.\n\nConduct time series analysis to explore how UHI intensity changes over various time frames (hourly, daily, seasonally, annually).\nIdentify peak periods of UHI intensity and investigate the underlying factors contributing to these peaks.\nCompare temporal patterns across different locations (urban vs. rural) to understand how geographical factors influence UHI intensity.\n\n\n\nModel Development and Evaluation\nObjective: Develop and assess models that classify and predict UHI intensity.\n\nBuild classification models to distinguish between various UHI intensity levels.\nOptimize models using techniques like cross-validation.\nEvaluate models using appropriate metrics (accuracy, precision, recall, etc.).\n\n\n\nInsight Generation and Recommendations\nObjective: Derive actionable insights and provide recommendations\nAnalyze model results to understand the key effects of UHI intensity.\n\n\nReporting\n\nCompile all reports and visualizations into one report, then prepare and deliver the final presentation on our results and overall UHI assessments."
  },
  {
    "objectID": "proposal.html#weekly-plan-of-attack",
    "href": "proposal.html#weekly-plan-of-attack",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "Weekly Plan of Attack",
    "text": "Weekly Plan of Attack\n\n\n\n\n\n\n\n\nWeek No. & Overview\nIndividual Weekly Tasks\nAssigned Team Members\n\n\n\n\nWeek 1\n11/8/23 - 11/15/23\nSetting up environment; data blending.\nDhanya, Udit\n\n\n\nIdentify missing values and perform imputation to deal with missing values.\nRiyanshi, Ajinkya\n\n\n\nData type conversions.\nKendall\n\n\nWeek 2\n11/15/23 - 11/22/23\nVisualization of key metrics.\nUdit, Dhanya\n\n\n-\nFeature engineering and selection.\nRiyanshi\n\n\n-\nData normalization and standardization.\nKendall, Ajinkya\n\n\nWeek 3\n11/22/23 - 11/29/23\nImplement Temporal Analysis.\nRiyanshi, Kendall, Dhanya\n\n\n-\nAnalyze trends over the months (seasons).\nUdit, Ajinkya\n\n\nWeek 4\n11/29/23 - 12/6/23\nBuild classification models.\nDhanya, Kendall\n\n\n-\nModel optimization & cross-validate models.\nRiyanshi, Udit\n\n\n-\nEvaluation metrics and performance analysis.\nAjinkya\n\n\nWeek 5 - Presentation\n12/6/23- 12/11/23\nCompile project documentation.\nKendall, Dhanya\n\n\n\nPrepare final presentation.\nUdit, Riyanshi, Ajinkya"
  },
  {
    "objectID": "proposal.html#organization-of-the-project-repository",
    "href": "proposal.html#organization-of-the-project-repository",
    "title": "Urban Heat Island Detection & Impact Analysis",
    "section": "Organization of the Project Repository",
    "text": "Organization of the Project Repository\nBelow are the key folders within the Project repository:\n\ndata/: This directory is designated for essential data files required for the project, including input files.\nimages/: This folder serves as the storage location for project-related visual representations and plots.\npresentation_files/: This folder is specifically reserved for materials relevant to project presentations.\n_extra/: We will brainstorm and store analysis-related content that doesn’t directly affect the project workflow.\n_freeze/: This folder stores the generated files during the build process, preserving the website’s specific state at a given moment.\n_site/: This is where we will generate our static website files after rendering our Quarto documents.\n.github/: This is where we will access and manage GitHub templates and workflow configurations."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project title",
    "section": "",
    "text": "Title: Exploring Urban Heat Islands: A Comparative Analysis of Metropolitan and Rural Environments\nObjective: This project aims to study and analyze climatological data for Dallas, Arlington, and Denton, categorizing them based on an “Urban Heat Island” (UHI) scale. By leveraging data mining and machine learning, the goal is to understand the microclimatic effects of urbanization in different settings and classify UHI intensity levels. The project will focus on three key aspects:\n\nDallas (Significant City):\n\nAnalyzing UHI in a major metropolitan area.\nConsidering factors such as pollution, land use, and climate to determine UHI intensity.\n\nArlington (Suburban Town):\n\nEvaluating UHI in a suburban setting with moderate population density.\nComparing UHI variations in less densely populated areas.\n\nDenton (Rural City):\n\nExamining UHI in a rural city with lower population density.\nConsidering factors like reduced pollution and different land use patterns.\n\n\nDataset: Climatological and hourly time-series data have been collected from various weather stations, providing key daily summaries for Arlington, Dallas, and Denton in 2022. The dataset includes information on temperature, precipitation, pressure, humidity, wind speed, and more.\nMethodology: Utilizing data mining and machine learning techniques, the project will detect and analyze UHIs, providing insights into the impact of urbanization on microclimates. The analysis includes visualizations and classification methods to interpret varying UHI intensity levels.\nDatasets: Three datasets have been prepared for Arlington, Dallas, and Denton, featuring key climatological parameters. The datasets have been cleaned and organized for further analysis.\nKey Questions:\n\nHow does UHI intensity vary between urban and rural settings throughout the year, and what methods can be employed to classify and interpret these intensity levels?\n\nInvestigating variations in UHI intensity between metropolitan and rural areas.\nEmploying multi-class classification to classify and interpret intensity levels.\n\nHow can time series data visualizations effectively illustrate variations in UHI intensity across metropolitan and rural areas like Arlington, Dallas, and Denton over a given year, highlighting distinct temporal patterns?\n\nExploring time series analysis to visualize UHI intensity changes over seasons.\nIdentifying patterns that differentiate between urban and rural heat impacts across the specified region.\n\n\nThis project will contribute to the understanding of UHI dynamics in different urban environments and provide valuable insights for sustainable urban development and climate resilience."
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Project title",
    "section": "",
    "text": "Title: Exploring Urban Heat Islands: A Comparative Analysis of Metropolitan and Rural Environments\nObjective: This project aims to study and analyze climatological data for Dallas, Arlington, and Denton, categorizing them based on an “Urban Heat Island” (UHI) scale. By leveraging data mining and machine learning, the goal is to understand the microclimatic effects of urbanization in different settings and classify UHI intensity levels. The project will focus on three key aspects:\n\nDallas (Significant City):\n\nAnalyzing UHI in a major metropolitan area.\nConsidering factors such as pollution, land use, and climate to determine UHI intensity.\n\nArlington (Suburban Town):\n\nEvaluating UHI in a suburban setting with moderate population density.\nComparing UHI variations in less densely populated areas.\n\nDenton (Rural City):\n\nExamining UHI in a rural city with lower population density.\nConsidering factors like reduced pollution and different land use patterns.\n\n\nDataset: Climatological and hourly time-series data have been collected from various weather stations, providing key daily summaries for Arlington, Dallas, and Denton in 2022. The dataset includes information on temperature, precipitation, pressure, humidity, wind speed, and more.\nMethodology: Utilizing data mining and machine learning techniques, the project will detect and analyze UHIs, providing insights into the impact of urbanization on microclimates. The analysis includes visualizations and classification methods to interpret varying UHI intensity levels.\nDatasets: Three datasets have been prepared for Arlington, Dallas, and Denton, featuring key climatological parameters. The datasets have been cleaned and organized for further analysis.\nKey Questions:\n\nHow does UHI intensity vary between urban and rural settings throughout the year, and what methods can be employed to classify and interpret these intensity levels?\n\nInvestigating variations in UHI intensity between metropolitan and rural areas.\nEmploying multi-class classification to classify and interpret intensity levels.\n\nHow can time series data visualizations effectively illustrate variations in UHI intensity across metropolitan and rural areas like Arlington, Dallas, and Denton over a given year, highlighting distinct temporal patterns?\n\nExploring time series analysis to visualize UHI intensity changes over seasons.\nIdentifying patterns that differentiate between urban and rural heat impacts across the specified region.\n\n\nThis project will contribute to the understanding of UHI dynamics in different urban environments and provide valuable insights for sustainable urban development and climate resilience."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project was developed by Byte Busters For INFO 523 - Data Mining and Discovery at the University of Arizona, taught by Dr. Greg Chism. The team is comprised of the following team members.\n\nTeam member 1: Kendall Beaver - First-year graduate student in Machine Learning.\nTeam member 2: Riyanshi Bohra: Graduate Student in Data Science.\nTeam member 3: Ajinkya Deshmukh: Graduate Student in Data Science.\nTeam member 4: Udit Chaudhary: Graduate Student in Data Science.\nTeam member 5: Dhanyapriya Somasundaram: Graduate Student in Data Science."
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "Data Pre Processing",
    "section": "",
    "text": "# Loading the Libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.ticker as mtick\n\n\nimport pandas as pd\n# Load the datasets from CSV files\n\ndallas = pd.read_csv('https://raw.githubusercontent.com/INFO-523-Exercises/project-final-Byte-Busters/main/data/Dallas.csv', header='infer' ,low_memory=False)\narlington = pd.read_csv('https://raw.githubusercontent.com/INFO-523-Exercises/project-final-Byte-Busters/main/data/Arlington.csv', header='infer' ,low_memory=False)\ndenton = pd.read_csv('https://raw.githubusercontent.com/INFO-523-Exercises/project-final-Byte-Busters/main/data/Denton.csv', header='infer' ,low_memory=False)\n\n\n# Convert the 'Date' column to datetime format\narlington['DATE'] = pd.to_datetime(arlington['DATE'])\ndallas['DATE'] = pd.to_datetime(dallas['DATE'])\ndenton['DATE'] = pd.to_datetime(denton['DATE'])\n\n\ncols_to_impute = ['HourlyDryBulbTemperature','HourlyWetBulbTemperature','HourlyRelativeHumidity','HourlyDewPointTemperature','HourlyPrecipitation','HourlySeaLevelPressure','HourlyStationPressure','HourlyWindSpeed','HourlyWindDirection']\n\nDallas\n\ndallas.head()\n\n\n  \n    \n\n\n\n\n\n\nSTATION\nDATE\nLATITUDE\nLONGITUDE\nELEVATION\nNAME\nREPORT_TYPE\nSOURCE\nHourlyAltimeterSetting\nHourlyDewPointTemperature\n...\nBackupDirection\nBackupDistance\nBackupDistanceUnit\nBackupElements\nBackupElevation\nBackupEquipment\nBackupLatitude\nBackupLongitude\nBackupName\nWindEquipmentChangeDate\n\n\n\n\n0\n72258013960\n2022-01-01 00:53:00\n32.83839\n-96.83583\n147.6\nDALLAS FAA AIRPORT, TX US\nFM-15\n7\n29.65\n63\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2009-05-28\n\n\n1\n72258013960\n2022-01-01 01:53:00\n32.83839\n-96.83583\n147.6\nDALLAS FAA AIRPORT, TX US\nFM-15\n7\n29.64\n63\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2009-05-28\n\n\n2\n72258013960\n2022-01-01 02:53:00\n32.83839\n-96.83583\n147.6\nDALLAS FAA AIRPORT, TX US\nFM-15\n7\n29.63\n63\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2009-05-28\n\n\n3\n72258013960\n2022-01-01 03:53:00\n32.83839\n-96.83583\n147.6\nDALLAS FAA AIRPORT, TX US\nFM-15\n7\n29.63\n61\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2009-05-28\n\n\n4\n72258013960\n2022-01-01 04:53:00\n32.83839\n-96.83583\n147.6\nDALLAS FAA AIRPORT, TX US\nFM-15\n7\n29.62\n59\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2009-05-28\n\n\n\n\n\n5 rows × 125 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\ndallas.describe()\n\n\n  \n    \n\n\n\n\n\n\nSTATION\nLATITUDE\nLONGITUDE\nELEVATION\nSOURCE\nHourlyPressureChange\nHourlyPressureTendency\nHourlyRelativeHumidity\nHourlyWetBulbTemperature\nHourlyWindGustSpeed\n...\nShortDurationPrecipitationValue180\nBackupDirection\nBackupDistance\nBackupDistanceUnit\nBackupElements\nBackupElevation\nBackupEquipment\nBackupLatitude\nBackupLongitude\nBackupName\n\n\n\n\ncount\n1.053600e+04\n10536.00000\n10536.00000\n1.053600e+04\n10536.000000\n2899.000000\n2899.000000\n10150.000000\n10058.000000\n3159.000000\n...\n8.000000\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nmean\n7.225801e+10\n32.83839\n-96.83583\n1.476000e+02\n6.916002\n-0.000114\n4.208348\n61.352512\n58.328097\n25.155112\n...\n1.387500\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nstd\n0.000000e+00\n0.00000\n0.00000\n2.842306e-14\n0.358855\n0.045213\n2.737678\n21.693770\n15.638864\n5.774307\n...\n1.423725\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmin\n7.225801e+10\n32.83839\n-96.83583\n1.476000e+02\n4.000000\n-0.250000\n0.000000\n12.000000\n8.000000\n16.000000\n...\n0.040000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25%\n7.225801e+10\n32.83839\n-96.83583\n1.476000e+02\n7.000000\n-0.030000\n1.000000\n44.000000\n47.000000\n21.000000\n...\n0.795000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n50%\n7.225801e+10\n32.83839\n-96.83583\n1.476000e+02\n7.000000\n0.000000\n3.000000\n61.000000\n62.000000\n24.000000\n...\n1.030000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n75%\n7.225801e+10\n32.83839\n-96.83583\n1.476000e+02\n7.000000\n0.030000\n6.000000\n79.000000\n73.000000\n29.000000\n...\n1.465000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmax\n7.225801e+10\n32.83839\n-96.83583\n1.476000e+02\n7.000000\n0.170000\n8.000000\n100.000000\n81.000000\n52.000000\n...\n4.700000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n8 rows × 89 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n# Specifying columns for data type conversion\\\n\ncols_dallas = ['HourlyDryBulbTemperature','HourlyDewPointTemperature','HourlyPrecipitation','HourlySeaLevelPressure','HourlyStationPressure','HourlyWindDirection']\n\n\n# Loop through columns in cols_dallas, extract the numeric part, and convert to float\n\nfor col in cols_dallas:\n    dallas[col] = dallas[col].str.extract('(\\d+)', expand=False).astype(float)\n\n\n# Checking for missing values in all the relevant columns\n\nfor col in cols_to_impute:\n    missing_values = dallas[col].isnull().sum()\n    print(f\"Missing values in {col}: {missing_values}\")\n\nMissing values in HourlyDryBulbTemperature: 384\nMissing values in HourlyWetBulbTemperature: 478\nMissing values in HourlyRelativeHumidity: 386\nMissing values in HourlyDewPointTemperature: 386\nMissing values in HourlyPrecipitation: 1884\nMissing values in HourlySeaLevelPressure: 1801\nMissing values in HourlyStationPressure: 476\nMissing values in HourlyWindSpeed: 388\nMissing values in HourlyWindDirection: 1090\n\n\n\n# Initialize the KNN Imputer\nimputer = KNNImputer(n_neighbors=5)\n\n# Apply KNN Imputation\ndallas[cols_to_impute] = imputer.fit_transform(dallas[cols_to_impute])\n\n\n# Checking for missing values in all the relevant columns after Imputation\n\nfor col in cols_to_impute:\n    missing_values = dallas[col].isnull().sum()\n    print(f\"Missing values in {col}: {missing_values}\")\n\nMissing values in HourlyDryBulbTemperature: 0\nMissing values in HourlyWetBulbTemperature: 0\nMissing values in HourlyRelativeHumidity: 0\nMissing values in HourlyDewPointTemperature: 0\nMissing values in HourlyPrecipitation: 0\nMissing values in HourlySeaLevelPressure: 0\nMissing values in HourlyStationPressure: 0\nMissing values in HourlyWindSpeed: 0\nMissing values in HourlyWindDirection: 0\n\n\nArlington\n\narlington.head()\n\n\n  \n    \n\n\n\n\n\n\nSTATION\nDATE\nLATITUDE\nLONGITUDE\nELEVATION\nNAME\nREPORT_TYPE\nSOURCE\nHourlyAltimeterSetting\nHourlyDewPointTemperature\n...\nBackupDirection\nBackupDistance\nBackupDistanceUnit\nBackupElements\nBackupElevation\nBackupEquipment\nBackupLatitude\nBackupLongitude\nBackupName\nWindEquipmentChangeDate\n\n\n\n\n0\n72247953907\n2022-01-01 00:18:00\n32.65832\n-97.09509\n179.7\nARLINGTON MUNICIPAL AIRPORT, TX US\nFM-16\n7\n29.66\n65\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-26\n\n\n1\n72247953907\n2022-01-01 00:27:00\n32.65832\n-97.09509\n179.7\nARLINGTON MUNICIPAL AIRPORT, TX US\nFM-16\n7\n29.66\n65\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-26\n\n\n2\n72247953907\n2022-01-01 00:53:00\n32.65832\n-97.09509\n179.7\nARLINGTON MUNICIPAL AIRPORT, TX US\nFM-15\n7\n29.65\n63\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-26\n\n\n3\n72247953907\n2022-01-01 01:53:00\n32.65832\n-97.09509\n179.7\nARLINGTON MUNICIPAL AIRPORT, TX US\nFM-15\n7\n29.65\n63\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-26\n\n\n4\n72247953907\n2022-01-01 02:53:00\n32.65832\n-97.09509\n179.7\nARLINGTON MUNICIPAL AIRPORT, TX US\nFM-15\n7\n29.63\n63\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-26\n\n\n\n\n\n5 rows × 125 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\narlington.describe()\n\n\n  \n    \n\n\n\n\n\n\nSTATION\nLATITUDE\nLONGITUDE\nELEVATION\nSOURCE\nHourlyPressureChange\nHourlyPressureTendency\nHourlyWindGustSpeed\nSunrise\nSunset\n...\nShortDurationPrecipitationValue150\nBackupDirection\nBackupDistance\nBackupDistanceUnit\nBackupElements\nBackupElevation\nBackupEquipment\nBackupLatitude\nBackupLongitude\nBackupName\n\n\n\n\ncount\n1.093800e+04\n10938.00000\n1.093800e+04\n1.093800e+04\n10938.000000\n2863.000000\n2863.000000\n2851.000000\n365.000000\n365.000000\n...\n12.000000\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nmean\n7.224795e+10\n32.65832\n-9.709509e+01\n1.797000e+02\n6.904553\n0.000014\n4.223192\n26.471414\n619.610959\n1836.087671\n...\n0.935833\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nstd\n0.000000e+00\n0.00000\n1.421150e-14\n2.842301e-14\n0.404595\n0.044873\n2.748253\n5.985668\n75.262156\n78.326753\n...\n1.013934\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmin\n7.224795e+10\n32.65832\n-9.709509e+01\n1.797000e+02\n4.000000\n-0.240000\n0.000000\n16.000000\n520.000000\n1722.000000\n...\n0.070000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25%\n7.224795e+10\n32.65832\n-9.709509e+01\n1.797000e+02\n7.000000\n-0.030000\n1.000000\n22.000000\n542.000000\n1750.000000\n...\n0.195000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n50%\n7.224795e+10\n32.65832\n-9.709509e+01\n1.797000e+02\n7.000000\n0.000000\n3.000000\n25.000000\n620.000000\n1836.000000\n...\n0.710000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n75%\n7.224795e+10\n32.65832\n-9.709509e+01\n1.797000e+02\n7.000000\n0.030000\n6.000000\n30.000000\n705.000000\n1918.000000\n...\n1.155000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmax\n7.224795e+10\n32.65832\n-9.709509e+01\n1.797000e+02\n7.000000\n0.160000\n8.000000\n59.000000\n731.000000\n1940.000000\n...\n3.680000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n8 rows × 72 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n# Specifying columns for data type conversion\n\ncols_arlington = ['HourlyDryBulbTemperature','HourlyWetBulbTemperature','HourlyDewPointTemperature','HourlyStationPressure','HourlyPrecipitation','HourlyWindSpeed','HourlySeaLevelPressure','HourlyWindDirection', 'HourlyRelativeHumidity']\n\n\n# Loop through columns in cols_arlington, extract the numeric part, and convert to float\n\nfor col in cols_arlington:\n    arlington[col] = arlington[col].str.extract('(\\d+)', expand=False).astype(float)\n\n\n# Checking for missing values in all the relevant columns\n\nfor col in cols_to_impute:\n    missing_values = arlington[col].isnull().sum()\n    print(f\"Missing values in {col}: {missing_values}\")\n\nMissing values in HourlyDryBulbTemperature: 398\nMissing values in HourlyWetBulbTemperature: 549\nMissing values in HourlyRelativeHumidity: 398\nMissing values in HourlyDewPointTemperature: 398\nMissing values in HourlyPrecipitation: 2410\nMissing values in HourlySeaLevelPressure: 2251\nMissing values in HourlyStationPressure: 529\nMissing values in HourlyWindSpeed: 482\nMissing values in HourlyWindDirection: 836\n\n\n\n# Initialize the KNN Imputer\nimputer = KNNImputer(n_neighbors=5)\n\n# Apply KNN Imputation\narlington[cols_to_impute] = imputer.fit_transform(arlington[cols_to_impute])\n\n\n# Checking for missing values in all the relevant columns after Imputation\n\nfor col in cols_to_impute:\n    missing_values = arlington[col].isnull().sum()\n    print(f\"Missing values in {col}: {missing_values}\")\n\nMissing values in HourlyDryBulbTemperature: 0\nMissing values in HourlyWetBulbTemperature: 0\nMissing values in HourlyRelativeHumidity: 0\nMissing values in HourlyDewPointTemperature: 0\nMissing values in HourlyPrecipitation: 0\nMissing values in HourlySeaLevelPressure: 0\nMissing values in HourlyStationPressure: 0\nMissing values in HourlyWindSpeed: 0\nMissing values in HourlyWindDirection: 0\n\n\nDenton\n\ndenton.head()\n\n\n  \n    \n\n\n\n\n\n\nSTATION\nDATE\nLATITUDE\nLONGITUDE\nELEVATION\nNAME\nREPORT_TYPE\nSOURCE\nHourlyAltimeterSetting\nHourlyDewPointTemperature\n...\nBackupDirection\nBackupDistance\nBackupDistanceUnit\nBackupElements\nBackupElevation\nBackupEquipment\nBackupLatitude\nBackupLongitude\nBackupName\nWindEquipmentChangeDate\n\n\n\n\n0\n72258903991\n2022-01-01 00:18:00\n33.20883\n-97.19922\n194.6\nDENTON MUNICPAL AIRPORT, TX US\nFM-16\n7\n29.66\n60\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-27\n\n\n1\n72258903991\n2022-01-01 00:53:00\n33.20883\n-97.19922\n194.6\nDENTON MUNICPAL AIRPORT, TX US\nFM-15\n7\n29.66\n59\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-27\n\n\n2\n72258903991\n2022-01-01 01:53:00\n33.20883\n-97.19922\n194.6\nDENTON MUNICPAL AIRPORT, TX US\nFM-15\n7\n29.63\n60\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-27\n\n\n3\n72258903991\n2022-01-01 02:53:00\n33.20883\n-97.19922\n194.6\nDENTON MUNICPAL AIRPORT, TX US\nFM-15\n7\n29.63\n60\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-27\n\n\n4\n72258903991\n2022-01-01 03:53:00\n33.20883\n-97.19922\n194.6\nDENTON MUNICPAL AIRPORT, TX US\nFM-15\n7\n29.63\n60\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2007-02-27\n\n\n\n\n\n5 rows × 125 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\ndenton.describe()\n\n\n  \n    \n\n\n\n\n\n\nSTATION\nLATITUDE\nLONGITUDE\nELEVATION\nSOURCE\nHourlyPressureChange\nHourlyPressureTendency\nHourlyRelativeHumidity\nHourlySeaLevelPressure\nHourlyWetBulbTemperature\n...\nShortDurationPrecipitationValue180\nBackupDirection\nBackupDistance\nBackupDistanceUnit\nBackupElements\nBackupElevation\nBackupEquipment\nBackupLatitude\nBackupLongitude\nBackupName\n\n\n\n\ncount\n1.080800e+04\n1.080800e+04\n1.080800e+04\n1.080800e+04\n10808.000000\n2919.000000\n2919.000000\n10423.000000\n8750.000000\n10292.000000\n...\n11.000000\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nmean\n7.225890e+10\n3.320883e+01\n-9.719922e+01\n1.946000e+02\n6.906643\n-0.000106\n4.254539\n64.744891\n30.012730\n56.977264\n...\n0.852727\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nstd\n0.000000e+00\n7.105756e-15\n2.842302e-14\n5.684605e-14\n0.395309\n0.045438\n2.732153\n22.760395\n0.215588\n16.311701\n...\n0.693903\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmin\n7.225890e+10\n3.320883e+01\n-9.719922e+01\n1.946000e+02\n4.000000\n-0.270000\n0.000000\n12.000000\n29.370000\n7.000000\n...\n0.010000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25%\n7.225890e+10\n3.320883e+01\n-9.719922e+01\n1.946000e+02\n7.000000\n-0.030000\n2.000000\n47.000000\n29.880000\n45.000000\n...\n0.345000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n50%\n7.225890e+10\n3.320883e+01\n-9.719922e+01\n1.946000e+02\n7.000000\n0.000000\n3.000000\n67.000000\n29.980000\n61.000000\n...\n0.730000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n75%\n7.225890e+10\n3.320883e+01\n-9.719922e+01\n1.946000e+02\n7.000000\n0.030000\n6.000000\n84.000000\n30.130000\n72.000000\n...\n1.280000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmax\n7.225890e+10\n3.320883e+01\n-9.719922e+01\n1.946000e+02\n7.000000\n0.170000\n8.000000\n100.000000\n30.820000\n80.000000\n...\n2.360000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n8 rows × 79 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n# Specifying columns for data type conversion\n\ncols_denton = ['HourlyDryBulbTemperature','HourlyDewPointTemperature','HourlyStationPressure','HourlyPrecipitation','HourlyWindSpeed','HourlyWindDirection']\n\n\n# Loop through columns in cols_denton, extract the numeric part, and convert to float\n\nfor col in cols_denton:\n    denton[col] = denton[col].str.extract('(\\d+)', expand=False).astype(float)\n\n\n# Checking for missing values in all the relevant columns\n\nfor col in cols_to_impute:\n    missing_values = denton[col].isnull().sum()\n    print(f\"Missing values in {col}: {missing_values}\")\n\nMissing values in HourlyDryBulbTemperature: 385\nMissing values in HourlyWetBulbTemperature: 516\nMissing values in HourlyRelativeHumidity: 385\nMissing values in HourlyDewPointTemperature: 383\nMissing values in HourlyPrecipitation: 2059\nMissing values in HourlySeaLevelPressure: 2058\nMissing values in HourlyStationPressure: 508\nMissing values in HourlyWindSpeed: 434\nMissing values in HourlyWindDirection: 693\n\n\n\n# Initialize the KNN Imputer\nimputer = KNNImputer(n_neighbors=5)\n\n# Apply KNN Imputation\ndenton[cols_to_impute] = imputer.fit_transform(denton[cols_to_impute])\n\n\n# Checking for missing values in all the relevant columns after Imputation\n\nfor col in cols_to_impute:\n    missing_values = denton[col].isnull().sum()\n    print(f\"Missing values in {col}: {missing_values}\")\n\nMissing values in HourlyDryBulbTemperature: 0\nMissing values in HourlyWetBulbTemperature: 0\nMissing values in HourlyRelativeHumidity: 0\nMissing values in HourlyDewPointTemperature: 0\nMissing values in HourlyPrecipitation: 0\nMissing values in HourlySeaLevelPressure: 0\nMissing values in HourlyStationPressure: 0\nMissing values in HourlyWindSpeed: 0\nMissing values in HourlyWindDirection: 0\n\n\n\nEDA: Exploratory Data Analysis\n\ndef extract_time_features(df):\n    df['Hour'] = df['DATE'].dt.hour\n    df['Time'] = df['DATE'].dt.strftime('%H:%M:%S')\n    df['Date'] = df['DATE'].dt.date\n    df['DayOfWeek'] = df['DATE'].dt.dayofweek\n    df['Month'] = df['DATE'].dt.month\n    df['Season'] = df['Month'].apply(lambda x: (x%12 + 3)//3)\n    seasons = {1: 'Winter', 2: 'Spring', 3: 'Summer', 4: 'Fall'}\n    df['Season'] = df['Season'].map(seasons)\n\n# Apply the time feature extraction to each dataset\nextract_time_features(arlington)\nextract_time_features(dallas)\nextract_time_features(denton)\n\nprint(arlington)\n\n           STATION                DATE  LATITUDE  LONGITUDE  ELEVATION  \\\n0      72247953907 2022-01-01 00:18:00  32.65832  -97.09509      179.7   \n1      72247953907 2022-01-01 00:27:00  32.65832  -97.09509      179.7   \n2      72247953907 2022-01-01 00:53:00  32.65832  -97.09509      179.7   \n3      72247953907 2022-01-01 01:53:00  32.65832  -97.09509      179.7   \n4      72247953907 2022-01-01 02:53:00  32.65832  -97.09509      179.7   \n...            ...                 ...       ...        ...        ...   \n10933  72247953907 2022-12-31 21:53:00  32.65832  -97.09509      179.7   \n10934  72247953907 2022-12-31 22:53:00  32.65832  -97.09509      179.7   \n10935  72247953907 2022-12-31 23:53:00  32.65832  -97.09509      179.7   \n10936  72247953907 2022-12-31 23:59:00  32.65832  -97.09509      179.7   \n10937  72247953907 2022-12-31 23:59:00  32.65832  -97.09509      179.7   \n\n                                     NAME REPORT_TYPE  SOURCE  \\\n0      ARLINGTON MUNICIPAL AIRPORT, TX US       FM-16       7   \n1      ARLINGTON MUNICIPAL AIRPORT, TX US       FM-16       7   \n2      ARLINGTON MUNICIPAL AIRPORT, TX US       FM-15       7   \n3      ARLINGTON MUNICIPAL AIRPORT, TX US       FM-15       7   \n4      ARLINGTON MUNICIPAL AIRPORT, TX US       FM-15       7   \n...                                   ...         ...     ...   \n10933  ARLINGTON MUNICIPAL AIRPORT, TX US       FM-15       7   \n10934  ARLINGTON MUNICIPAL AIRPORT, TX US       FM-15       7   \n10935  ARLINGTON MUNICIPAL AIRPORT, TX US       FM-15       7   \n10936  ARLINGTON MUNICIPAL AIRPORT, TX US       SOD         6   \n10937  ARLINGTON MUNICIPAL AIRPORT, TX US       SOM         6   \n\n      HourlyAltimeterSetting  HourlyDewPointTemperature  ...  BackupLatitude  \\\n0                      29.66                  65.000000  ...             NaN   \n1                      29.66                  65.000000  ...             NaN   \n2                      29.65                  63.000000  ...             NaN   \n3                      29.65                  63.000000  ...             NaN   \n4                      29.63                  63.000000  ...             NaN   \n...                      ...                        ...  ...             ...   \n10933                  29.83                  44.000000  ...             NaN   \n10934                  29.84                  44.000000  ...             NaN   \n10935                  29.84                  44.000000  ...             NaN   \n10936                    NaN                  51.215844  ...             NaN   \n10937                    NaN                  51.215844  ...             NaN   \n\n       BackupLongitude BackupName  WindEquipmentChangeDate  Hour      Time  \\\n0                  NaN        NaN               2007-02-26     0  00:18:00   \n1                  NaN        NaN               2007-02-26     0  00:27:00   \n2                  NaN        NaN               2007-02-26     0  00:53:00   \n3                  NaN        NaN               2007-02-26     1  01:53:00   \n4                  NaN        NaN               2007-02-26     2  02:53:00   \n...                ...        ...                      ...   ...       ...   \n10933              NaN        NaN               2007-02-26    21  21:53:00   \n10934              NaN        NaN               2007-02-26    22  22:53:00   \n10935              NaN        NaN               2007-02-26    23  23:53:00   \n10936              NaN        NaN               2007-02-26    23  23:59:00   \n10937              NaN        NaN               2007-02-26    23  23:59:00   \n\n             Date  DayOfWeek  Month  Season  \n0      2022-01-01          5      1  Winter  \n1      2022-01-01          5      1  Winter  \n2      2022-01-01          5      1  Winter  \n3      2022-01-01          5      1  Winter  \n4      2022-01-01          5      1  Winter  \n...           ...        ...    ...     ...  \n10933  2022-12-31          5     12  Winter  \n10934  2022-12-31          5     12  Winter  \n10935  2022-12-31          5     12  Winter  \n10936  2022-12-31          5     12  Winter  \n10937  2022-12-31          5     12  Winter  \n\n[10938 rows x 131 columns]\n\n\nBasic Statistical Tests\n\n# For Dallas\nprint(\"Basic Statistics for Dallas:\")\nprint(dallas[['HourlyDryBulbTemperature','HourlyWetBulbTemperature', 'HourlyDewPointTemperature', 'HourlyPrecipitation',\n              'HourlySeaLevelPressure', 'HourlyStationPressure', 'HourlyRelativeHumidity',\n              'HourlyWindSpeed', 'HourlyWindDirection']].describe())\n\nBasic Statistics for Dallas:\n       HourlyDryBulbTemperature  HourlyWetBulbTemperature  \\\ncount              10536.000000              10536.000000   \nmean                  67.197414                 58.333991   \nstd                   18.608601                 15.293785   \nmin                   11.000000                  8.000000   \n25%                   55.000000                 48.000000   \n50%                   68.000000                 61.000000   \n75%                   81.000000                 72.000000   \nmax                  107.000000                 81.000000   \n\n       HourlyDewPointTemperature  HourlyPrecipitation  HourlySeaLevelPressure  \\\ncount               10536.000000         10536.000000            10536.000000   \nmean                   51.414822             0.001489               29.453747   \nstd                    17.581486             0.033942                0.470971   \nmin                     0.000000             0.000000               29.000000   \n25%                    38.000000             0.000000               29.000000   \n50%                    56.000000             0.000000               29.200000   \n75%                    66.000000             0.000000               30.000000   \nmax                    76.000000             1.000000               30.000000   \n\n       HourlyStationPressure  HourlyRelativeHumidity  HourlyWindSpeed  \\\ncount           10536.000000            10536.000000     10536.000000   \nmean               29.009181               61.355909         8.742737   \nstd                 0.127099               21.295024         5.102282   \nmin                28.000000               12.000000         0.000000   \n25%                29.000000               45.000000         6.000000   \n50%                29.000000               61.352512         8.000000   \n75%                29.000000               78.000000        11.000000   \nmax                30.000000              100.000000        36.000000   \n\n       HourlyWindDirection  \ncount         10536.000000  \nmean            164.009625  \nstd              97.066256  \nmin               0.000000  \n25%             110.000000  \n50%             160.000000  \n75%             200.000000  \nmax             360.000000  \n\n\n\n# For Arlington\nprint(\"Basic Statistics for Arlington:\")\nprint(arlington[['HourlyDryBulbTemperature', 'HourlyWetBulbTemperature', 'HourlyDewPointTemperature', 'HourlyPrecipitation',\n              'HourlySeaLevelPressure', 'HourlyStationPressure', 'HourlyRelativeHumidity',\n              'HourlyWindSpeed', 'HourlyWindDirection']].describe())\n\nBasic Statistics for Arlington:\n       HourlyDryBulbTemperature  HourlyWetBulbTemperature  \\\ncount              10938.000000              10938.000000   \nmean                  66.799237                 58.075903   \nstd                   18.621383                 15.162909   \nmin                   11.000000                  8.000000   \n25%                   54.250000                 48.000000   \n50%                   68.000000                 61.000000   \n75%                   80.000000                 72.000000   \nmax                  108.000000                 79.000000   \n\n       HourlyDewPointTemperature  HourlyPrecipitation  HourlySeaLevelPressure  \\\ncount               10938.000000         10938.000000            10938.000000   \nmean                   51.249222             0.001719               29.441497   \nstd                    17.430900             0.040534                0.465324   \nmin                     0.000000             0.000000               29.000000   \n25%                    39.000000             0.000000               29.000000   \n50%                    56.000000             0.000000               29.200000   \n75%                    66.000000             0.000000               30.000000   \nmax                    77.000000             1.000000               30.000000   \n\n       HourlyStationPressure  HourlyRelativeHumidity  HourlyWindSpeed  \\\ncount           10938.000000            10938.000000     10938.000000   \nmean               28.971671               62.252016         9.088201   \nstd                 0.170122               21.772457         5.689781   \nmin                28.000000                8.000000         0.000000   \n25%                29.000000               46.000000         6.000000   \n50%                29.000000               63.000000         9.000000   \n75%                29.000000               81.000000        13.000000   \nmax                30.000000              100.000000        36.000000   \n\n       HourlyWindDirection  \ncount         10938.000000  \nmean            161.875966  \nstd             102.341655  \nmin               0.000000  \n25%             110.000000  \n50%             160.000000  \n75%             200.000000  \nmax             360.000000  \n\n\n\n# For Denton\nprint(\"Basic Statistics for Denton:\")\nprint(denton[['HourlyDryBulbTemperature', 'HourlyWetBulbTemperature', 'HourlyDewPointTemperature', 'HourlyPrecipitation',\n              'HourlySeaLevelPressure', 'HourlyStationPressure', 'HourlyRelativeHumidity',\n              'HourlyWindSpeed', 'HourlyWindDirection']].describe())\n\nBasic Statistics for Denton:\n       HourlyDryBulbTemperature  HourlyWetBulbTemperature  \\\ncount              10808.000000              10808.000000   \nmean                  65.053764                 56.960310   \nstd                   19.644345                 15.936749   \nmin                   10.000000                  7.000000   \n25%                   52.000000                 46.000000   \n50%                   66.000000                 60.000000   \n75%                   80.000000                 71.000000   \nmax                  110.000000                 80.000000   \n\n       HourlyDewPointTemperature  HourlyPrecipitation  HourlySeaLevelPressure  \\\ncount               10808.000000         10808.000000            10808.000000   \nmean                   50.681699             0.000230               30.005838   \nstd                    17.623262             0.013871                0.202828   \nmin                     0.000000             0.000000               29.370000   \n25%                    37.000000             0.000000               29.880000   \n50%                    55.000000             0.000000               29.980000   \n75%                    66.000000             0.000000               30.110000   \nmax                    76.000000             1.000000               30.820000   \n\n       HourlyStationPressure  HourlyRelativeHumidity  HourlyWindSpeed  \\\ncount           10808.000000            10808.000000     10808.000000   \nmean               28.967564               64.737678         9.472105   \nstd                 0.181262               22.355446         6.077904   \nmin                28.000000               12.000000         0.000000   \n25%                29.000000               47.000000         6.000000   \n50%                29.000000               65.000000         9.000000   \n75%                29.000000               83.000000        14.000000   \nmax                30.000000              100.000000        37.000000   \n\n       HourlyWindDirection  \ncount         10808.000000  \nmean            164.818284  \nstd             107.662173  \nmin               0.000000  \n25%             100.000000  \n50%             160.000000  \n75%             210.000000  \nmax             360.000000  \n\n\n\n\nsns.histplot(dallas['HourlyDryBulbTemperature'], bins=30)\nplt.title('Distribution of Hourly Dry Bulb Temperature in Dallas')\nplt.show()\n\n\n\n\nTemperature difference based on different times of the day\n\ndef categorize_day_night(hour):\n    if 6 &lt;= hour &lt; 18:\n        return 'Daytime'\n    else:\n        return 'Nighttime'\n\n# Apply this function to your datasets\narlington['Day_Night'] = arlington['Hour'].apply(categorize_day_night)\ndallas['Day_Night'] = dallas['Hour'].apply(categorize_day_night)\ndenton['Day_Night'] = denton['Hour'].apply(categorize_day_night)\n\n\n# Calculate average temperatures\narlington_day_night_avg = arlington.groupby('Day_Night')['HourlyDryBulbTemperature'].mean()\ndallas_day_night_avg = dallas.groupby('Day_Night')['HourlyDryBulbTemperature'].mean()\ndenton_day_night_avg = denton.groupby('Day_Night')['HourlyDryBulbTemperature'].mean()\n\n\n# Display the average temperatures\nprint(\"Arlington - Day vs Night Avg Temperature:\\n\", arlington_day_night_avg)\nprint(\"Dallas - Day vs Night Avg Temperature:\\n\", dallas_day_night_avg)\nprint(\"Denton - Day vs Night Avg Temperature:\\n\", denton_day_night_avg)\n\nArlington - Day vs Night Avg Temperature:\n Day_Night\nDaytime      70.285486\nNighttime    63.472445\nName: HourlyDryBulbTemperature, dtype: float64\nDallas - Day vs Night Avg Temperature:\n Day_Night\nDaytime      69.709055\nNighttime    64.807656\nName: HourlyDryBulbTemperature, dtype: float64\nDenton - Day vs Night Avg Temperature:\n Day_Night\nDaytime      69.248691\nNighttime    61.061842\nName: HourlyDryBulbTemperature, dtype: float64\n\n\n\n# Set up for multiple bar plot\nbar_width = 0.2  # width of the bars\nindex = np.arange(3)  # Three cities\n\n# Creating the plot\nplt.figure(figsize=(7, 5))\nplt.bar(index, [dallas_day_night_avg['Daytime'], arlington_day_night_avg['Daytime'],denton_day_night_avg['Daytime']],\n        bar_width, color='#EF810E', label='Daytime')\nplt.bar(index + bar_width, [dallas_day_night_avg['Nighttime'],arlington_day_night_avg['Nighttime'],  denton_day_night_avg['Nighttime']],\n        bar_width, color='#095D79', label='Nighttime')\n\nplt.xlabel('Cities')\nplt.ylabel('Average Temperature (°F)')\nplt.title('Daytime vs Nighttime Average Temperatures Across Cities')\nplt.xticks(index + bar_width / 2, ['Dallas', 'Arlington', 'Denton'])\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n\n\n\n\nKey Takeaways:\n\nThe smaller difference in nighttime and daytime temperatures in Dallas aligns with a stronger UHI effect, where the urban environment retains more heat.\nArlington, while also urban, shows a slightly more significant temperature drop at night than Dallas, indicating a somewhat less intense UHI effect.\nDenton’s larger temperature drop is consistent with rural areas that do not exhibit strong UHI effects.\n\n\n# Function to plot data\ndef plot_data(data, city_name):\n    plt.figure(figsize=(12, 3))\n    plt.subplot(1, 3, 1)\n    sns.boxplot(y=data['HourlyDryBulbTemperature'])\n    plt.title(f'{city_name} Temperature')\n\n    plt.subplot(1, 3, 2)\n    sns.boxplot(y=data['HourlyRelativeHumidity'])\n    plt.title(f'{city_name} Humidity')\n\n    plt.subplot(1, 3, 3)\n    sns.boxplot(y=data['HourlyWindSpeed'])\n    plt.title(f'{city_name} Wind Speed')\n\n    plt.tight_layout()\n    plt.show()\n\n\n# Plot for each city\nplot_data(dallas, 'Dallas')\nplot_data(arlington, 'Arlington')\nplot_data(denton, 'Denton')\n\n\n\n\n\n\n\n\n\n\n\n########################################################################\n# Begin Plot for \"Region Comparison - Monthly Avg Drop in Temp at Night\"\n########################################################################\n\n# Remove midnight \"23:59:00\" and only look at \"nighttime\" values for all 3 regions\nplot_arlington = arlington[(arlington['Time'] != '23:59:00') & (arlington['Day_Night'] == 'Nighttime')].copy()\nplot_dallas = dallas[(dallas['Time'] != '23:59:00') & (dallas['Day_Night'] == 'Nighttime')].copy()\nplot_denton = denton[(denton['Time'] != '23:59:00') & (denton['Day_Night'] == 'Nighttime')].copy()\n\n\n# Calculate \"nightly rate of change\" (high vs. low temps) for Arlington\nplot_arlington['low'] = plot_arlington.groupby('Date')['HourlyDryBulbTemperature'].transform('min')\nplot_arlington['high'] = plot_arlington.groupby('Date')['HourlyDryBulbTemperature'].transform('max')\nplot_arlington['rate_of_change'] = (plot_arlington['high'] - plot_arlington['low']) / plot_arlington['low'] * 100\n\n# Calculate \"average monthly temperature rate of change\" for Arlington\navg_rate_of_change_by_date = plot_arlington.groupby('Date')['rate_of_change'].mean().reset_index()\navg_rate_of_change_by_date['Date'] = pd.to_datetime(avg_rate_of_change_by_date['Date'])\navg_rate_of_change_by_date['Month'] = avg_rate_of_change_by_date['Date'].dt.month\navg_rate_of_change_by_month_arlington = avg_rate_of_change_by_date.groupby('Month')['rate_of_change'].mean().reset_index()\n\n\n# Calculate \"nightly rate of change\" (high vs. low temps) for Dallas\nplot_dallas['low'] = plot_dallas.groupby('Date')['HourlyDryBulbTemperature'].transform('min')\nplot_dallas['high'] = plot_dallas.groupby('Date')['HourlyDryBulbTemperature'].transform('max')\nplot_dallas['rate_of_change'] = (plot_dallas['high'] - plot_dallas['low']) / plot_dallas['low'] * 100\n\n# Calculate \"average monthly temperature rate of change\" for Dallas\navg_rate_of_change_by_date = plot_dallas.groupby('Date')['rate_of_change'].mean().reset_index()\navg_rate_of_change_by_date['Date'] = pd.to_datetime(avg_rate_of_change_by_date['Date'])\navg_rate_of_change_by_date['Month'] = avg_rate_of_change_by_date['Date'].dt.month\navg_rate_of_change_by_month_dallas = avg_rate_of_change_by_date.groupby('Month')['rate_of_change'].mean().reset_index()\n\n\n# Calculate \"nightly rate of change\" (high vs. low temps) for Denton\nplot_denton['low'] = plot_denton.groupby('Date')['HourlyDryBulbTemperature'].transform('min')\nplot_denton['high'] = plot_denton.groupby('Date')['HourlyDryBulbTemperature'].transform('max')\nplot_denton['rate_of_change'] = (plot_denton['high'] - plot_denton['low']) / plot_denton['low'] * 100\n\n# Calculate \"nightly rate of change\" (high vs. low temps) for Denton\navg_rate_of_change_by_date = plot_denton.groupby('Date')['rate_of_change'].mean().reset_index()\navg_rate_of_change_by_date['Date'] = pd.to_datetime(avg_rate_of_change_by_date['Date'])\navg_rate_of_change_by_date['Month'] = avg_rate_of_change_by_date['Date'].dt.month\navg_rate_of_change_by_month_denton = avg_rate_of_change_by_date.groupby('Month')['rate_of_change'].mean().reset_index()\n\n\n# Plot the data\nplt.plot(avg_rate_of_change_by_month_arlington['Month'], avg_rate_of_change_by_month_arlington['rate_of_change'], label='Arlington', marker='o')\nplt.plot(avg_rate_of_change_by_month_dallas['Month'], avg_rate_of_change_by_month_dallas['rate_of_change'], label='Dallas', marker='o')\nplt.plot(avg_rate_of_change_by_month_denton['Month'], avg_rate_of_change_by_month_denton['rate_of_change'], label='Denton', marker='o')\n\n# Change x-axis from \"numbers of months\" to \"names of months\"\nmonths = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\nplt.xticks(avg_rate_of_change_by_month_arlington['Month'], months)\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n\n# Labels for plot\nplt.xlabel('2022')\nplt.ylabel('Avg Nightly Drop in Temp')\nplt.title('Region Comparison - Monthly Avg Drop in Temp at Night')\nplt.grid(False)\nplt.legend()\nplt.show()\n\n\n\n\n\n\nFeature Engineering\n\n# Calculate statistics for each season for DALLAS\nseasonal_dallas = dallas.groupby('Season')['HourlyDryBulbTemperature'].describe()\nseasonal_dallas\n\n\n  \n    \n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSeason\n\n\n\n\n\n\n\n\n\n\n\n\nFall\n2634.0\n67.042932\n14.265842\n30.0\n56.0\n69.0\n78.0\n98.0\n\n\nSpring\n2715.0\n67.975059\n12.681151\n27.0\n61.0\n69.0\n77.0\n94.0\n\n\nSummer\n2522.0\n86.649202\n8.862565\n65.0\n80.0\n86.0\n94.0\n107.0\n\n\nWinter\n2665.0\n48.149829\n14.432498\n11.0\n37.0\n49.0\n61.0\n81.0\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n# Calculate statistics for each season for ARLINGTON\nseasonal_arlington = arlington.groupby('Season')['HourlyDryBulbTemperature'].describe()\nseasonal_arlington\n\n\n  \n    \n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSeason\n\n\n\n\n\n\n\n\n\n\n\n\nFall\n2769.0\n66.031157\n14.235938\n27.000000\n55.0\n66.779507\n76.0\n97.0\n\n\nSpring\n2815.0\n68.219415\n13.080171\n21.000000\n61.0\n70.000000\n77.0\n95.0\n\n\nSummer\n2582.0\n85.899006\n9.204437\n66.779507\n79.0\n85.000000\n93.0\n108.0\n\n\nWinter\n2772.0\n48.333656\n15.161430\n11.000000\n36.0\n49.000000\n62.0\n91.6\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n# Calculate statistics for each season for DENTON\nseasonal_denton = denton.groupby('Season')['HourlyDryBulbTemperature'].describe()\nseasonal_denton\n\n\n  \n    \n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSeason\n\n\n\n\n\n\n\n\n\n\n\n\nFall\n2737.0\n64.294286\n15.315628\n24.0\n53.0\n65.041063\n75.0\n99.0\n\n\nSpring\n2786.0\n66.098672\n14.210371\n18.0\n58.0\n67.000000\n76.0\n98.0\n\n\nSummer\n2572.0\n85.197473\n9.804702\n64.0\n78.0\n85.000000\n93.0\n110.0\n\n\nWinter\n2713.0\n45.650136\n15.474265\n10.0\n32.0\n47.000000\n59.0\n81.0\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n# Calculate the 25th, 50th, and 75th quartiles for each season for Dallas\ndallas_temp = dallas.groupby('Season')['HourlyDryBulbTemperature'].quantile([0.75, 0.50, 0.25]).unstack()\ndallas_humidity = dallas.groupby('Season')['HourlyRelativeHumidity'].quantile([0.25, 0.50, 0.75]).unstack()\ndallas_wind_speed = dallas.groupby('Season')['HourlyWindSpeed'].quantile([0.25, 0.50, 0.75]).unstack()\n\n# Display the thresholds\nprint(dallas_temp)\nprint(dallas_humidity)\nprint(dallas_wind_speed)\n\n        0.25  0.50  0.75\nSeason                  \nFall    56.0  69.0  78.0\nSpring  61.0  69.0  77.0\nSummer  80.0  86.0  94.0\nWinter  37.0  49.0  61.0\n        0.25  0.50   0.75\nSeason                   \nFall    47.0  63.0  83.00\nSpring  47.0  63.0  77.00\nSummer  40.0  55.0  68.75\nWinter  45.0  63.0  84.00\n        0.25  0.50  0.75\nSeason                  \nFall     5.0   7.0   9.0\nSpring   7.0  11.0  15.0\nSummer   6.0   8.0  10.0\nWinter   5.0   8.0  11.0\n\n\n\n# Calculate the 25th, 50th, and 75th quartiles for each season for Arlington\nar_temp = arlington.groupby('Season')['HourlyDryBulbTemperature'].quantile([0.75, 0.50, 0.25]).unstack()\nar_humidity = arlington.groupby('Season')['HourlyRelativeHumidity'].quantile([0.75, 0.50, 0.25]).unstack()\nar_wind_speed = arlington.groupby('Season')['HourlyWindSpeed'].quantile([0.75, 0.50, 0.25]).unstack()\n\n# Display the thresholds\nprint(ar_temp)\nprint(ar_humidity)\nprint(ar_wind_speed)\n\n        0.25       0.50  0.75\nSeason                       \nFall    55.0  66.779507  76.0\nSpring  61.0  70.000000  77.0\nSummer  79.0  85.000000  93.0\nWinter  36.0  49.000000  62.0\n        0.25  0.50  0.75\nSeason                  \nFall    50.0  70.0  86.0\nSpring  47.5  64.0  79.0\nSummer  40.0  57.0  71.0\nWinter  46.0  66.0  85.0\n        0.25  0.50  0.75\nSeason                  \nFall     3.0   7.0  10.0\nSpring   7.0  11.0  16.0\nSummer   6.0   8.0  11.0\nWinter   5.0   8.0  13.0\n\n\n\n# Calculate the 25th, 50th, and 75th quartiles for each season for Denton\ndenton_temp = denton.groupby('Season')['HourlyDryBulbTemperature'].quantile([0.75, 0.50, 0.25]).unstack()\ndenton_humidity = denton.groupby('Season')['HourlyRelativeHumidity'].quantile([0.75, 0.50, 0.25]).unstack()\ndenton_wind_speed = denton.groupby('Season')['HourlyWindSpeed'].quantile([0.75, 0.50, 0.25]).unstack()\n\n# Display the thresholds\nprint(denton_temp)\nprint(denton_humidity)\nprint(denton_wind_speed)\n\n        0.25       0.50  0.75\nSeason                       \nFall    53.0  65.041063  75.0\nSpring  58.0  67.000000  76.0\nSummer  78.0  85.000000  93.0\nWinter  32.0  47.000000  59.0\n        0.25  0.50  0.75\nSeason                  \nFall    51.0  72.0  90.0\nSpring  50.0  67.0  81.0\nSummer  41.0  58.5  74.0\nWinter  50.0  70.0  86.0\n        0.25  0.50  0.75\nSeason                  \nFall     5.0   8.0  10.0\nSpring   7.0  13.0  17.0\nSummer   6.0   8.0  11.0\nWinter   5.0   8.0  13.0\n\n\n\ndef classify_uhi(row, temp_thresholds, humidity_thresholds, wind_speed_thresholds):\n    season = row['Season']\n    temp = row['HourlyDryBulbTemperature']\n    humidity = row['HourlyRelativeHumidity']\n    wind_speed = row['HourlyWindSpeed']\n\n    # Get the thresholds for the current season\n    temp_high = temp_thresholds.loc[season, 0.50]\n    temp_medium = temp_thresholds.loc[season, 0.25]\n    #temp_high = temp_thresholds.loc[season, 0.75]\n    #temp_medium = temp_thresholds.loc[season, 0.50]\n    humidity_low = humidity_thresholds.loc[season, 0.25]\n    wind_speed_low = wind_speed_thresholds.loc[season, 0.25]\n\n    # Classify based on combined criteria\n    if temp &gt; temp_high and humidity &lt; humidity_low and wind_speed &lt; wind_speed_low:\n        return 'High'\n    elif temp &gt; temp_medium:\n        return 'Medium'\n    else:\n        return 'Low'\n\n\n# Apply the function\ndallas['UHI Intensity'] = dallas.apply(lambda row: classify_uhi(row, dallas_temp, dallas_humidity, dallas_wind_speed), axis=1)\narlington['UHI Intensity'] = arlington.apply(lambda row: classify_uhi(row, ar_temp, ar_humidity, ar_wind_speed), axis=1)\ndenton['UHI Intensity'] = denton.apply(lambda row: classify_uhi(row, denton_temp, denton_humidity, denton_wind_speed), axis=1)\n\n\n# for Dallas\nprint(dallas['UHI Intensity'].value_counts())\n\nMedium    7520\nLow       2769\nHigh       247\nName: UHI Intensity, dtype: int64\n\n\n\n# for Arlington\nprint(arlington['UHI Intensity'].value_counts())\n\nMedium    7928\nLow       2850\nHigh       160\nName: UHI Intensity, dtype: int64\n\n\n\n# for Denton\nprint(denton['UHI Intensity'].value_counts())\n\nMedium    7770\nLow       2849\nHigh       189\nName: UHI Intensity, dtype: int64\n\n\n\ncustom_palette = sns.color_palette(\"Set2\", n_colors=3)\n\n# Set up the plot\nplt.figure(figsize=(12, 8))\n\n# Plotting with a line style and markers\nsns.lineplot(x=pd.to_datetime(arlington['DATE']).dt.month, y=arlington['HourlyRelativeHumidity'], label='Arlington', color=custom_palette[0], linestyle='-', marker='o', markersize=8)\nsns.lineplot(x=pd.to_datetime(dallas['DATE']).dt.month, y=dallas['HourlyRelativeHumidity'], label='Dallas', color=custom_palette[1], linestyle='-', marker='s', markersize=8)\nsns.lineplot(x=pd.to_datetime(denton['DATE']).dt.month, y=denton['HourlyRelativeHumidity'], label='Denton', color=custom_palette[2], linestyle='-', marker='^', markersize=8)\n\n# Customize the title and labels\nplt.title('Seasonal Variation of Relative Humidity in Different Cities', fontsize=18, fontweight='bold', color='darkblue')\nplt.xlabel('Month', fontsize=14, fontweight='bold', color='darkgreen')\nplt.ylabel('Relative Humidity (%)', fontsize=14, fontweight='bold', color='darkred')\n\n# Customize the legend\nplt.legend(title='Cities', title_fontsize='14')\n\n# Enhance grid lines\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Add background colors to highlight seasons with different colors\nseasons = [(1, 'Winter', 'lightblue'), (4, 'Spring', 'lightgreen'), (7, 'Summer', 'lightcoral'), (10, 'Fall', 'khaki')]\nfor month, season_name, color in seasons:\n    plt.axvspan(month - 1, month + 2, alpha=0.2, color=color, label=season_name)\n    plt.text(month + 1, plt.ylim()[1] * 0.95, season_name, fontsize=12, ha='center', va='center', color='black', fontweight='bold')\n\n# Show the plot\nplt.show()\n\n\n\n\n\n# Calculate the average temperature for each hour of the day for each city\narlington_hourly_avg = arlington.groupby('Hour')['HourlyDryBulbTemperature'].mean()\ndallas_hourly_avg = dallas.groupby('Hour')['HourlyDryBulbTemperature'].mean()\ndenton_hourly_avg = denton.groupby('Hour')['HourlyDryBulbTemperature'].mean()\n\n# Plotting\nplt.figure(figsize=(12, 6))\nplt.plot(arlington_hourly_avg, label='Arlington')\nplt.plot(dallas_hourly_avg, label='Dallas')\nplt.plot(denton_hourly_avg, label='Denton')\nplt.xlabel('Hour of the Day')\nplt.ylabel('Average Temperature')\nplt.title('Average Hourly Temperature')\nplt.legend()\nplt.grid(visible=True)\nplt.show()\n\n\n\n\n\n\nTemporal Analysis\n\n# UHI Intensity Seasonal Daily Avg Temp - Dallas\n\n# Adding grid style to the plot\nsns.set(style=\"whitegrid\")\n\n# Creating boxplot with different colors for \"Season\"\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"UHI Intensity\", y=\"DailyAverageDryBulbTemperature\", hue=\"Season\", data=dallas,\n            order=[\"Low\", \"Medium\", \"High\"], hue_order=[\"Winter\", \"Spring\", \"Summer\", \"Fall\"])\n\n# Set plot labels and title\nplt.xlabel(\"UHI Intensity\")\nplt.ylabel(\"Daily Avgerate Temperature\")\nplt.title(\"Seasonal Daily Avg Temp by UHI Intensity - Dallas\")\n\n# Show the legend\nplt.legend(title=\"Season\")\n\n# Show the plot\nplt.show()\n\n\n\n\n\n# UHI Intensity Seasonal Daily Avg Temp - Arlington\n\n# Ensure numeric data types for the relevant columns\narlington['DailyAverageDryBulbTemperature'] = pd.to_numeric(arlington['DailyAverageDryBulbTemperature'], errors='coerce')\n\n# Adding grid style to the plot\nsns.set(style=\"whitegrid\")\n\n# Creating boxplot with different colors for \"Season\"\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"UHI Intensity\", y=\"DailyAverageDryBulbTemperature\", hue=\"Season\", data=arlington,\n            order=[\"Low\", \"Medium\", \"High\"], hue_order=[\"Winter\", \"Spring\", \"Summer\", \"Fall\"])\n\n# Set plot labels and title\nplt.xlabel(\"UHI Intensity\")\nplt.ylabel(\"Daily Avgerate Temperature\")\nplt.title(\"Seasonal Daily Avg Temp by UHI Intensity - Arlington\")\n\n# Show the legend\nplt.legend(title=\"Season\")\n\n# Show the plot\nplt.show()\n\n\n\n\n\n# UHI Intensity Seasonal Daily Avg Temp - Denton\n\n# Ensure numeric data types for the relevant columns\ndenton['DailyAverageDryBulbTemperature'] = pd.to_numeric(denton['DailyAverageDryBulbTemperature'], errors='coerce')\n\n# Adding grid style to the plot\nsns.set(style=\"whitegrid\")\n\n# Creating boxplot with different colors for \"Season\"\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"UHI Intensity\", y=\"DailyAverageDryBulbTemperature\", hue=\"Season\", data=denton,\n            order=[\"Low\", \"Medium\", \"High\"], hue_order=[\"Winter\", \"Spring\", \"Summer\", \"Fall\"])\n\n# Set plot labels and title\nplt.xlabel(\"UHI Intensity\")\nplt.ylabel(\"Daily Avgerate Temperature\")\nplt.title(\"Seasonal Daily Avg Temp by UHI Intensity - Denton\")\n\n# Show the legend\nplt.legend(title=\"Season\")\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\nModel Development\n\n# Combining datasets\ncombined_data = pd.concat([dallas, arlington, denton])\n\n\ncombined_data = pd.get_dummies(combined_data, columns=['Season'])\nfeatures = ['HourlyDryBulbTemperature','HourlyWetBulbTemperature','HourlyRelativeHumidity','HourlyDewPointTemperature','HourlyPrecipitation','HourlySeaLevelPressure','HourlyStationPressure','HourlyWindSpeed','HourlyWindDirection']\n\n\nX = combined_data[features]  # Features\ny = combined_data['UHI Intensity']  # Target variable\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# Initialize the LabelEncoder\nencoder= LabelEncoder()\n\n# Fit and transform the labels in the training and testing sets\ny_train_new = encoder.fit_transform(y_train)\ny_test_new = encoder.transform(y_test)\n\nModel 1: Decision Tree Classifier\n\ndt_model = DecisionTreeClassifier()\ndt_model.fit(X_train, y_train)\n\n# Prediction and Evaluation\ndt_pred = dt_model.predict(X_test)\nprint(classification_report(y_test, dt_pred))\n\n              precision    recall  f1-score   support\n\n        High       0.77      0.75      0.76       131\n         Low       0.78      0.75      0.76      1646\n      Medium       0.91      0.92      0.92      4680\n\n    accuracy                           0.87      6457\n   macro avg       0.82      0.81      0.81      6457\nweighted avg       0.87      0.87      0.87      6457\n\n\n\nModel 2: Random Forest Classifier\n\nrfc_model = RandomForestClassifier()\nrfc_model.fit(X_train, y_train)\n\nRandomForestClassifier()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier()\n\n\n\ny_pred = rfc_model.predict(X_test)\nprint(classification_report(y_test, y_pred))\n\n              precision    recall  f1-score   support\n\n        High       0.87      0.75      0.80       131\n         Low       0.85      0.77      0.80      1646\n      Medium       0.92      0.95      0.93      4680\n\n    accuracy                           0.90      6457\n   macro avg       0.88      0.82      0.85      6457\nweighted avg       0.90      0.90      0.90      6457\n\n\n\nHyperparameter Tuning\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_features': ['auto', 'sqrt'],\n    'max_depth' : [4, 6, 8],\n    'criterion' :['gini', 'entropy']\n}\n\ncv_rfc = RandomizedSearchCV(estimator=rfc_model, param_distributions= param_grid, cv=5)\ncv_rfc.fit(X_train, y_train)\n\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n  warn(\n\n\nRandomizedSearchCV(cv=5, estimator=RandomForestClassifier(),\n                   param_distributions={'criterion': ['gini', 'entropy'],\n                                        'max_depth': [4, 6, 8],\n                                        'max_features': ['auto', 'sqrt'],\n                                        'n_estimators': [100, 200, 300]})In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomizedSearchCVRandomizedSearchCV(cv=5, estimator=RandomForestClassifier(),\n                   param_distributions={'criterion': ['gini', 'entropy'],\n                                        'max_depth': [4, 6, 8],\n                                        'max_features': ['auto', 'sqrt'],\n                                        'n_estimators': [100, 200, 300]})estimator: RandomForestClassifierRandomForestClassifier()RandomForestClassifierRandomForestClassifier()\n\n\n\ny_pred_new = cv_rfc.predict(X_test)\nprint(classification_report(y_test, y_pred))\n\n              precision    recall  f1-score   support\n\n        High       0.87      0.75      0.80       131\n         Low       0.85      0.77      0.80      1646\n      Medium       0.92      0.95      0.93      4680\n\n    accuracy                           0.90      6457\n   macro avg       0.88      0.82      0.85      6457\nweighted avg       0.90      0.90      0.90      6457\n\n\n\nModel 3: XGBoost Classifier\n\n# Using encoded labels to train the model\nxgb_model = XGBClassifier()\nxgb_model.fit(X_train, y_train_new)\n\n# Prediction and Evaluation\nxgb_pred = xgb_model.predict(X_test)\nprint(classification_report(y_test_new, xgb_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.81      0.76      0.79       131\n           1       0.83      0.75      0.79      1646\n           2       0.91      0.94      0.93      4680\n\n    accuracy                           0.89      6457\n   macro avg       0.85      0.82      0.83      6457\nweighted avg       0.89      0.89      0.89      6457\n\n\n\nModel 4: Gradient Boost Classifier\n\ngb_model = GradientBoostingClassifier()\ngb_model.fit(X_train, y_train_new)\n\n# Prediction and Evaluation\ngb_pred = gb_model.predict(X_test)\nprint(classification_report(y_test_new, gb_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.85      0.76      0.81       131\n           1       0.79      0.67      0.72      1646\n           2       0.88      0.94      0.91      4680\n\n    accuracy                           0.86      6457\n   macro avg       0.84      0.79      0.81      6457\nweighted avg       0.86      0.86      0.86      6457\n\n\n\nModel 5: SVM Classifier\n\nfrom sklearn.svm import SVC\n\nsvm_model = SVC()\nsvm_model.fit(X_train, y_train)\n\n# Prediction and Evaluation\nsvm_pred= svm_model.predict(X_test)\nprint(classification_report(y_test, svm_pred))\n\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n\n\n              precision    recall  f1-score   support\n\n        High       0.00      0.00      0.00       131\n         Low       0.76      0.39      0.52      1646\n      Medium       0.80      0.96      0.87      4680\n\n    accuracy                           0.79      6457\n   macro avg       0.52      0.45      0.46      6457\nweighted avg       0.77      0.79      0.76      6457"
  },
  {
    "objectID": "presentation.html#uhi-definition",
    "href": "presentation.html#uhi-definition",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "UHI Definition",
    "text": "UHI Definition\n\nUHI (“Urban Heat Island”) is a micro-climate condition that occurs when a city experiences much warmer temperatures than nearby rural areas.\n\n{: style=“border: 2px solid #000;”}{fig-align=“center”}"
  },
  {
    "objectID": "presentation.html#cities-for-uhi-comparison",
    "href": "presentation.html#cities-for-uhi-comparison",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "3 Cities for UHI Comparison",
    "text": "3 Cities for UHI Comparison\n\nDallas\n\nPopulation: 1,288,457 (2021)\n\nArlington\n\nPopulation: 392,786 (2021)\n\nDenton\n\nPopulation: 148,146 (2021)"
  },
  {
    "objectID": "presentation.html#datasets-1",
    "href": "presentation.html#datasets-1",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Datasets",
    "text": "Datasets\n\nThree datasets for the year 2022 were obtained from the National Centers for Environmental Information, then combined into one major dataset."
  },
  {
    "objectID": "presentation.html#analyzing-temperature-differences",
    "href": "presentation.html#analyzing-temperature-differences",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Analyzing Temperature Differences",
    "text": "Analyzing Temperature Differences\n\nThe smaller difference in nighttime and daytime temperatures in Dallas aligns with a stronger UHI effect.\nArlington, while also urban, shows a slightly more significant temperature drop at night than Dallas, indicating a somewhat less intense UHI effect.\nDenton’s larger temperature drop is consistent with rural areas that do not exhibit strong UHI effects."
  },
  {
    "objectID": "presentation.html#quarto",
    "href": "presentation.html#quarto",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Quarto",
    "text": "Quarto\n\nThe presentation is created using the Quarto CLI\n## sets the start of a new slide"
  },
  {
    "objectID": "presentation.html#layouts",
    "href": "presentation.html#layouts",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Layouts",
    "text": "Layouts\nYou can use plain text\n\n\n\nor bullet points1\n\n\nor in two columns\n\n\n\nlike\nthis\n\nAnd add footnotes"
  },
  {
    "objectID": "presentation.html#code",
    "href": "presentation.html#code",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Code",
    "text": "Code\n\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic       p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n1 (Intercept)   25.3      3.08        8.22 0.00000000358\n2 speed         -0.116    0.0642     -1.81 0.0806       \n\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1    0.0983        0.0682  5.82      3.27  0.0806     1  -101.  207.  212.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "presentation.html#plots",
    "href": "presentation.html#plots",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Plots",
    "text": "Plots"
  },
  {
    "objectID": "presentation.html#plot-and-text",
    "href": "presentation.html#plot-and-text",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Plot and text",
    "text": "Plot and text\n\n\n\nSome text\ngoes here"
  },
  {
    "objectID": "presentation.html#tables",
    "href": "presentation.html#tables",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Tables",
    "text": "Tables\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n\n\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n\n\nAdelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale"
  },
  {
    "objectID": "presentation.html#images",
    "href": "presentation.html#images",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Images",
    "text": "Images\n\nImage credit: Danielle Navarro, Percolate."
  },
  {
    "objectID": "presentation.html#math-expressions",
    "href": "presentation.html#math-expressions",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Math Expressions",
    "text": "Math Expressions\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. $\\alpha+\\beta$ renders \\(\\alpha + \\beta\\). You can use the display style with double dollar signs:\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\\[\n\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i\n\\]\nLimitations:\n\nThe source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting $$ must appear in the very beginning of a line, followed immediately by a non-space character, and the ending $$ must be at the end of a line, led by a non-space character;\nThere should not be spaces after the opening $ or before the closing $."
  },
  {
    "objectID": "presentation.html#feeling-adventurous",
    "href": "presentation.html#feeling-adventurous",
    "title": "Urban Climate Patterns: Analysis of Urban Heat Islands",
    "section": "Feeling adventurous?",
    "text": "Feeling adventurous?\n\nYou are welcomed to use the default styling of the slides. In fact, that’s what I expect majority of you will do. You will differentiate yourself with the content of your presentation.\nBut some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs."
  }
]